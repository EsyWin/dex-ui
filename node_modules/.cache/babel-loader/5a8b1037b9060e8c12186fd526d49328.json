{"ast":null,"code":"var _jsxFileName = \"/home/dev/Code/dex-ui/src/components/UserInfoTable/BalancesTable.jsx\";\nimport { Button, Col, Row } from 'antd';\nimport React, { useState } from 'react';\nimport { useTokenAccounts, getSelectedTokenAccountForMint } from '../../utils/markets';\nimport { useSendConnection } from '../../utils/connection';\nimport { useWallet } from '../../utils/wallet';\nimport { settleFunds } from '../../utils/send';\nimport { notify } from '../../utils/notifications';\nexport default function BalancesTable({\n  balances,\n  showMarket,\n  hideWalletBalance,\n  onSettleSuccess\n}) {\n  const [accounts] = useTokenAccounts();\n  const connection = useSendConnection();\n  const {\n    wallet\n  } = useWallet();\n\n  async function onSettleFunds(market, openOrders) {\n    try {\n      await settleFunds({\n        market,\n        openOrders,\n        connection,\n        wallet,\n        baseCurrencyAccount: getSelectedTokenAccountForMint(accounts, market === null || market === void 0 ? void 0 : market.baseMintAddress),\n        quoteCurrencyAccount: getSelectedTokenAccountForMint(accounts, market === null || market === void 0 ? void 0 : market.quoteMintAddress)\n      });\n    } catch (e) {\n      notify({\n        message: 'Error settling funds',\n        description: e.message,\n        type: 'error'\n      });\n      return;\n    }\n\n    onSettleSuccess && onSettleSuccess();\n  }\n\n  const [rowItem, setRowItem] = useState(4);\n\n  if (showMarket) {\n    setRowItem(rowItem + 1);\n  }\n\n  if (hideWalletBalance) {\n    setRowItem(rowItem + 1);\n  } // setRowItem(Math.floor(24 / rowItem));\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    style: {\n      fontSize: 14,\n      color: 'rgba(241, 241, 242, 0.5)',\n      paddingBottom: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, showMarket ? /*#__PURE__*/React.createElement(Col, {\n    span: 24 / rowItem,\n    style: {\n      textAlign: 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, \"Market\") : null, /*#__PURE__*/React.createElement(Col, {\n    span: 24 / rowItem,\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"Coin\"), hideWalletBalance ? /*#__PURE__*/React.createElement(Col, {\n    span: 24 / rowItem,\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"Wallet Balance\") : null, /*#__PURE__*/React.createElement(Col, {\n    span: 24 / rowItem,\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"Orders\"), /*#__PURE__*/React.createElement(Col, {\n    span: 24 / rowItem,\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, \"Unsettled\"), /*#__PURE__*/React.createElement(Col, {\n    span: 24 / rowItem,\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, \"Action\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 350,\n      overflowX: 'hidden'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, balances.map(({\n    marketName,\n    coin,\n    wallet,\n    orders,\n    unsettled,\n    market,\n    openOrders\n  }, i) => /*#__PURE__*/React.createElement(Row, {\n    key: i,\n    style: {\n      fontSize: 14,\n      color: 'rgba(241, 241, 242, 1)',\n      paddingBottom: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, showMarket ? /*#__PURE__*/React.createElement(Col, {\n    span: 24 / rowItem,\n    style: {\n      textAlign: 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, marketName) : null, /*#__PURE__*/React.createElement(Col, {\n    span: 24 / rowItem,\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, coin), hideWalletBalance ? /*#__PURE__*/React.createElement(Col, {\n    span: 24 / rowItem,\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, wallet) : null, /*#__PURE__*/React.createElement(Col, {\n    span: 24 / rowItem,\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  }, orders), /*#__PURE__*/React.createElement(Col, {\n    span: 24 / rowItem,\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, unsettled), /*#__PURE__*/React.createElement(Col, {\n    span: 24 / rowItem,\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    ghost: true,\n    style: {\n      marginRight: 12\n    },\n    onClick: () => onSettleFunds(market, openOrders),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, \"Settle \", marketName)))))) // <DataTable\n  //   emptyLabel=\"No balances\"\n  //   dataSource={balances}\n  //   columns={columns}\n  //   pagination={false}\n  // />\n  ;\n}","map":{"version":3,"sources":["/home/dev/Code/dex-ui/src/components/UserInfoTable/BalancesTable.jsx"],"names":["Button","Col","Row","React","useState","useTokenAccounts","getSelectedTokenAccountForMint","useSendConnection","useWallet","settleFunds","notify","BalancesTable","balances","showMarket","hideWalletBalance","onSettleSuccess","accounts","connection","wallet","onSettleFunds","market","openOrders","baseCurrencyAccount","baseMintAddress","quoteCurrencyAccount","quoteMintAddress","e","message","description","type","rowItem","setRowItem","fontSize","color","paddingBottom","textAlign","height","overflowX","map","marketName","coin","orders","unsettled","i","marginRight"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,QAAiC,MAAjC;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,gBADF,EAEEC,8BAFF,QAGO,qBAHP;AAIA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,2BAAvB;AAEA,eAAe,SAASC,aAAT,CAAuB;AACpCC,EAAAA,QADoC;AAEpCC,EAAAA,UAFoC;AAGpCC,EAAAA,iBAHoC;AAIpCC,EAAAA;AAJoC,CAAvB,EAKZ;AACD,QAAM,CAACC,QAAD,IAAaX,gBAAgB,EAAnC;AACA,QAAMY,UAAU,GAAGV,iBAAiB,EAApC;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAaV,SAAS,EAA5B;;AAEA,iBAAeW,aAAf,CAA6BC,MAA7B,EAAqCC,UAArC,EAAiD;AAC/C,QAAI;AACF,YAAMZ,WAAW,CAAC;AAChBW,QAAAA,MADgB;AAEhBC,QAAAA,UAFgB;AAGhBJ,QAAAA,UAHgB;AAIhBC,QAAAA,MAJgB;AAKhBI,QAAAA,mBAAmB,EAAEhB,8BAA8B,CACjDU,QADiD,EAEjDI,MAFiD,aAEjDA,MAFiD,uBAEjDA,MAAM,CAAEG,eAFyC,CALnC;AAShBC,QAAAA,oBAAoB,EAAElB,8BAA8B,CAClDU,QADkD,EAElDI,MAFkD,aAElDA,MAFkD,uBAElDA,MAAM,CAAEK,gBAF0C;AATpC,OAAD,CAAjB;AAcD,KAfD,CAeE,OAAOC,CAAP,EAAU;AACVhB,MAAAA,MAAM,CAAC;AACLiB,QAAAA,OAAO,EAAE,sBADJ;AAELC,QAAAA,WAAW,EAAEF,CAAC,CAACC,OAFV;AAGLE,QAAAA,IAAI,EAAE;AAHD,OAAD,CAAN;AAKA;AACD;;AACDd,IAAAA,eAAe,IAAIA,eAAe,EAAlC;AACD;;AACD,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwB3B,QAAQ,CAAC,CAAD,CAAtC;;AACA,MAAIS,UAAJ,EAAgB;AACdkB,IAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACD;;AACD,MAAIhB,iBAAJ,EAAuB;AACrBiB,IAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACD,GArCA,CAsCD;;;AACA,sBACE,uDACE,oBAAC,GAAD;AACE,IAAA,KAAK,EAAE;AACLE,MAAAA,QAAQ,EAAE,EADL;AAELC,MAAAA,KAAK,EAAE,0BAFF;AAGLC,MAAAA,aAAa,EAAE;AAHV,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGrB,UAAU,gBACT,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,KAAKiB,OAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADS,GAIP,IAXN,eAYE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,KAAKL,OAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF,EAeGrB,iBAAiB,gBAChB,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,KAAKgB,OAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADgB,GAId,IAnBN,eAoBE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,KAAKL,OAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBF,eAuBE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,KAAKL,OAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAvBF,eA0BE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,KAAKL,OAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1BF,CADF,eA+BE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,SAAS,EAAE;AAA1B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGzB,QAAQ,CAAC0B,GAAT,CACC,CACE;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,IAAd;AAAoBtB,IAAAA,MAApB;AAA4BuB,IAAAA,MAA5B;AAAoCC,IAAAA,SAApC;AAA+CtB,IAAAA,MAA/C;AAAuDC,IAAAA;AAAvD,GADF,EAEEsB,CAFF,kBAIE,oBAAC,GAAD;AACE,IAAA,GAAG,EAAEA,CADP;AAEE,IAAA,KAAK,EAAE;AACLX,MAAAA,QAAQ,EAAE,EADL;AAELC,MAAAA,KAAK,EAAE,wBAFF;AAGLC,MAAAA,aAAa,EAAE;AAHV,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGrB,UAAU,gBACT,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,KAAKiB,OAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,UADH,CADS,GAIP,IAZN,eAaE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,KAAKT,OAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGK,IADH,CAbF,EAgBG1B,iBAAiB,gBAChB,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,KAAKgB,OAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,MADH,CADgB,GAId,IApBN,eAqBE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,KAAKY,OAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,MADH,CArBF,eAwBE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,KAAKX,OAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,SADH,CAxBF,eA2BE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,KAAKZ,OAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,KAAK,EAAE;AAAES,MAAAA,WAAW,EAAE;AAAf,KAFT;AAGE,IAAA,OAAO,EAAE,MAAMzB,aAAa,CAACC,MAAD,EAASC,UAAT,CAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAKUkB,UALV,CADF,CA3BF,CALH,CADH,CA/BF,CADF,CA+EE;AACA;AACA;AACA;AACA;AACA;AApFF;AAsFD","sourcesContent":["import { Button, Col, Row } from 'antd';\r\nimport React, { useState } from 'react';\r\nimport {\r\n  useTokenAccounts,\r\n  getSelectedTokenAccountForMint,\r\n} from '../../utils/markets';\r\nimport { useSendConnection } from '../../utils/connection';\r\nimport { useWallet } from '../../utils/wallet';\r\nimport { settleFunds } from '../../utils/send';\r\nimport { notify } from '../../utils/notifications';\r\n\r\nexport default function BalancesTable({\r\n  balances,\r\n  showMarket,\r\n  hideWalletBalance,\r\n  onSettleSuccess,\r\n}) {\r\n  const [accounts] = useTokenAccounts();\r\n  const connection = useSendConnection();\r\n  const { wallet } = useWallet();\r\n\r\n  async function onSettleFunds(market, openOrders) {\r\n    try {\r\n      await settleFunds({\r\n        market,\r\n        openOrders,\r\n        connection,\r\n        wallet,\r\n        baseCurrencyAccount: getSelectedTokenAccountForMint(\r\n          accounts,\r\n          market?.baseMintAddress,\r\n        ),\r\n        quoteCurrencyAccount: getSelectedTokenAccountForMint(\r\n          accounts,\r\n          market?.quoteMintAddress,\r\n        ),\r\n      });\r\n    } catch (e) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    onSettleSuccess && onSettleSuccess();\r\n  }\r\n  const [rowItem, setRowItem] = useState(4);\r\n  if (showMarket) {\r\n    setRowItem(rowItem + 1);\r\n  }\r\n  if (hideWalletBalance) {\r\n    setRowItem(rowItem + 1);\r\n  }\r\n  // setRowItem(Math.floor(24 / rowItem));\r\n  return (\r\n    <>\r\n      <Row\r\n        style={{\r\n          fontSize: 14,\r\n          color: 'rgba(241, 241, 242, 0.5)',\r\n          paddingBottom: 16,\r\n        }}\r\n      >\r\n        {showMarket ? (\r\n          <Col span={24 / rowItem} style={{ textAlign: 'left' }}>\r\n            Market\r\n          </Col>\r\n        ) : null}\r\n        <Col span={24 / rowItem} style={{ textAlign: 'right' }}>\r\n          Coin\r\n        </Col>\r\n        {hideWalletBalance ? (\r\n          <Col span={24 / rowItem} style={{ textAlign: 'right' }}>\r\n            Wallet Balance\r\n          </Col>\r\n        ) : null}\r\n        <Col span={24 / rowItem} style={{ textAlign: 'right' }}>\r\n          Orders\r\n        </Col>\r\n        <Col span={24 / rowItem} style={{ textAlign: 'right' }}>\r\n          Unsettled\r\n        </Col>\r\n        <Col span={24 / rowItem} style={{ textAlign: 'right' }}>\r\n          Action\r\n        </Col>\r\n      </Row>\r\n      <div style={{ height: 350, overflowX: 'hidden' }}>\r\n        {balances.map(\r\n          (\r\n            { marketName, coin, wallet, orders, unsettled, market, openOrders },\r\n            i,\r\n          ) => (\r\n            <Row\r\n              key={i}\r\n              style={{\r\n                fontSize: 14,\r\n                color: 'rgba(241, 241, 242, 1)',\r\n                paddingBottom: 16,\r\n              }}\r\n            >\r\n              {showMarket ? (\r\n                <Col span={24 / rowItem} style={{ textAlign: 'left' }}>\r\n                  {marketName}\r\n                </Col>\r\n              ) : null}\r\n              <Col span={24 / rowItem} style={{ textAlign: 'right' }}>\r\n                {coin}\r\n              </Col>\r\n              {hideWalletBalance ? (\r\n                <Col span={24 / rowItem} style={{ textAlign: 'right' }}>\r\n                  {wallet}\r\n                </Col>\r\n              ) : null}\r\n              <Col span={24 / rowItem} style={{ textAlign: 'right' }}>\r\n                {orders}\r\n              </Col>\r\n              <Col span={24 / rowItem} style={{ textAlign: 'right' }}>\r\n                {unsettled}\r\n              </Col>\r\n              <Col span={24 / rowItem} style={{ textAlign: 'right' }}>\r\n                <Button\r\n                  ghost\r\n                  style={{ marginRight: 12 }}\r\n                  onClick={() => onSettleFunds(market, openOrders)}\r\n                >\r\n                  Settle {marketName}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          ),\r\n        )}\r\n      </div>\r\n    </>\r\n    // <DataTable\r\n    //   emptyLabel=\"No balances\"\r\n    //   dataSource={balances}\r\n    //   columns={columns}\r\n    //   pagination={false}\r\n    // />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}