{"ast":null,"code":"var _jsxFileName = \"/home/dev/Code/dex-ui/src/components/TradingView/index.tsx\";\nimport './index.css';\nimport * as React from 'react';\nimport * as saveLoadAdapter from './saveLoadAdapter';\nimport { widget } from '../../charting_library';\nimport { flatten } from '../../utils/utils';\nimport { useMarket } from '../../utils/markets';\nimport { convertResolutionToApi, useTvDataFeed } from '../../utils/Datafeed';\nexport const TVChartContainer = () => {\n  var _window$localStorage$;\n\n  let datafeed = useTvDataFeed();\n  let resolution = (_window$localStorage$ = window.localStorage.getItem('resolution')) !== null && _window$localStorage$ !== void 0 ? _window$localStorage$ : '60';\n\n  try {\n    convertResolutionToApi(resolution);\n  } catch (e) {\n    resolution = '60';\n  }\n\n  const defaultProps = {\n    symbol: 'RAY/USDT',\n    // @ts-ignore\n    interval: resolution ? resolution : '60',\n    auto_save_delay: 5,\n    theme: 'Dark',\n    containerId: 'tv_chart_container',\n    libraryPath: '/charting_library/',\n    chartsStorageUrl: 'https://saveload.tradingview.com',\n    chartsStorageApiVersion: '1.1',\n    clientId: 'tradingview.com',\n    userId: 'public_user_id',\n    fullscreen: false,\n    autosize: true,\n    studiesOverrides: {},\n    timeframe: '1D'\n  };\n  const tvWidgetRef = React.useRef(null);\n  const {\n    marketName\n  } = useMarket();\n  const chartProperties = JSON.parse(localStorage.getItem('chartproperties') || '{}');\n  React.useEffect(() => {\n    const savedProperties = flatten(chartProperties, {\n      restrictTo: ['scalesProperties', 'paneProperties', 'tradingProperties']\n    });\n    const widgetOptions = {\n      symbol: marketName,\n      datafeed: datafeed,\n      interval: defaultProps.interval,\n      container_id: defaultProps.containerId,\n      library_path: defaultProps.libraryPath,\n      auto_save_delay: 5,\n      locale: 'en',\n      disabled_features: ['use_localstorage_for_settings'],\n      enabled_features: ['study_templates'],\n      load_last_chart: true,\n      client_id: defaultProps.clientId,\n      user_id: defaultProps.userId,\n      fullscreen: defaultProps.fullscreen,\n      autosize: defaultProps.autosize,\n      studies_overrides: defaultProps.studiesOverrides,\n      theme: defaultProps.theme === 'Dark' ? 'Dark' : 'Light',\n      overrides: { ...savedProperties,\n        'mainSeriesProperties.candleStyle.upColor': '#41C77A',\n        'mainSeriesProperties.candleStyle.downColor': '#F23B69',\n        // 'mainSeriesProperties.candleStyle.borderColor': '#378658',\n        'mainSeriesProperties.candleStyle.borderUpColor': '#41C77A',\n        'mainSeriesProperties.candleStyle.borderDownColor': '#F23B69',\n        'mainSeriesProperties.candleStyle.wickUpColor': '#41C77A',\n        'mainSeriesProperties.candleStyle.wickDownColor': '#F23B69'\n      },\n      // @ts-ignore\n      save_load_adapter: saveLoadAdapter,\n      settings_adapter: {\n        initialSettings: {\n          'trading.orderPanelSettingsBroker': JSON.stringify({\n            showRelativePriceControl: false,\n            showCurrencyRiskInQty: false,\n            showPercentRiskInQty: false,\n            showBracketsInCurrency: false,\n            showBracketsInPercent: false\n          }),\n          // \"proterty\"\n          'trading.chart.proterty': localStorage.getItem('trading.chart.proterty') || JSON.stringify({\n            hideFloatingPanel: 1\n          }),\n          'chart.favoriteDrawings': localStorage.getItem('chart.favoriteDrawings') || JSON.stringify([]),\n          'chart.favoriteDrawingsPosition': localStorage.getItem('chart.favoriteDrawingsPosition') || JSON.stringify({})\n        },\n        setValue: (key, value) => {\n          localStorage.setItem(key, value);\n        },\n        removeValue: key => {\n          localStorage.removeItem(key);\n        }\n      }\n    };\n    const tvWidget = new widget(widgetOptions);\n    tvWidget.onChartReady(() => {\n      tvWidgetRef.current = tvWidget;\n      tvWidget // @ts-ignore\n      .subscribe('onAutoSaveNeeded', () => tvWidget.saveChartToServer());\n    });\n  }, [chartProperties, datafeed, defaultProps.autosize, defaultProps.clientId, defaultProps.containerId, defaultProps.fullscreen, defaultProps.interval, defaultProps.libraryPath, defaultProps.studiesOverrides, defaultProps.theme, defaultProps.userId, marketName]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: window.innerWidth < 1000 ? '50vh' : 540\n    },\n    id: defaultProps.containerId,\n    className: 'TVChartContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 10\n    }\n  });\n};","map":{"version":3,"sources":["/home/dev/Code/dex-ui/src/components/TradingView/index.tsx"],"names":["React","saveLoadAdapter","widget","flatten","useMarket","convertResolutionToApi","useTvDataFeed","TVChartContainer","datafeed","resolution","window","localStorage","getItem","e","defaultProps","symbol","interval","auto_save_delay","theme","containerId","libraryPath","chartsStorageUrl","chartsStorageApiVersion","clientId","userId","fullscreen","autosize","studiesOverrides","timeframe","tvWidgetRef","useRef","marketName","chartProperties","JSON","parse","useEffect","savedProperties","restrictTo","widgetOptions","container_id","library_path","locale","disabled_features","enabled_features","load_last_chart","client_id","user_id","studies_overrides","overrides","save_load_adapter","settings_adapter","initialSettings","stringify","showRelativePriceControl","showCurrencyRiskInQty","showPercentRiskInQty","showBracketsInCurrency","showBracketsInPercent","hideFloatingPanel","setValue","key","value","setItem","removeValue","removeItem","tvWidget","onChartReady","current","subscribe","saveChartToServer","height","innerWidth"],"mappings":"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","sourcesContent":["import './index.css';\r\n\r\nimport * as React from 'react';\r\nimport * as saveLoadAdapter from './saveLoadAdapter';\r\n\r\nimport {\r\n  ChartingLibraryWidgetOptions,\r\n  IChartingLibraryWidget,\r\n  widget,\r\n} from '../../charting_library';\r\n\r\nimport { flatten } from '../../utils/utils';\r\nimport { useMarket } from '../../utils/markets';\r\nimport { convertResolutionToApi, useTvDataFeed } from '../../utils/Datafeed';\r\n\r\nexport interface ChartContainerProps {\r\n  symbol: ChartingLibraryWidgetOptions['symbol'];\r\n  interval: ChartingLibraryWidgetOptions['interval'];\r\n  auto_save_delay: ChartingLibraryWidgetOptions['auto_save_delay'];\r\n\r\n  // BEWARE: no trailing slash is expected in feed URL\r\n  datafeedUrl: string;\r\n  libraryPath: ChartingLibraryWidgetOptions['library_path'];\r\n  chartsStorageUrl: ChartingLibraryWidgetOptions['charts_storage_url'];\r\n  chartsStorageApiVersion: ChartingLibraryWidgetOptions['charts_storage_api_version'];\r\n  clientId: ChartingLibraryWidgetOptions['client_id'];\r\n  userId: ChartingLibraryWidgetOptions['user_id'];\r\n  fullscreen: ChartingLibraryWidgetOptions['fullscreen'];\r\n  autosize: ChartingLibraryWidgetOptions['autosize'];\r\n  studiesOverrides: ChartingLibraryWidgetOptions['studies_overrides'];\r\n  containerId: ChartingLibraryWidgetOptions['container_id'];\r\n  theme: string;\r\n  timeframe: ChartingLibraryWidgetOptions['timeframe'];\r\n}\r\n\r\nexport interface ChartContainerState {}\r\n\r\nexport const TVChartContainer = () => {\r\n  let datafeed = useTvDataFeed();\r\n  let resolution = window.localStorage.getItem('resolution') ?? '60'\r\n\r\n  try {\r\n    convertResolutionToApi(resolution)\r\n  } catch(e) {\r\n    resolution = '60'\r\n  }\r\n  \r\n  const defaultProps: ChartContainerProps = {\r\n    symbol: 'RAY/USDT',\r\n    // @ts-ignore\r\n    interval: resolution ? resolution : '60',\r\n    auto_save_delay: 5,\r\n    theme: 'Dark',\r\n    containerId: 'tv_chart_container',\r\n    libraryPath: '/charting_library/',\r\n    chartsStorageUrl: 'https://saveload.tradingview.com',\r\n    chartsStorageApiVersion: '1.1',\r\n    clientId: 'tradingview.com',\r\n    userId: 'public_user_id',\r\n    fullscreen: false,\r\n    autosize: true,\r\n    studiesOverrides: {},\r\n    timeframe: '1D'\r\n  };\r\n\r\n  const tvWidgetRef = React.useRef<IChartingLibraryWidget | null>(null);\r\n  const { marketName } = useMarket();\r\n\r\n  const chartProperties = JSON.parse(\r\n    localStorage.getItem('chartproperties') || '{}',\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const savedProperties = flatten(chartProperties, {\r\n      restrictTo: ['scalesProperties', 'paneProperties', 'tradingProperties'],\r\n    });\r\n\r\n    const widgetOptions: ChartingLibraryWidgetOptions = {\r\n      symbol: marketName as string,\r\n      datafeed: datafeed,\r\n      interval: defaultProps.interval as ChartingLibraryWidgetOptions['interval'],\r\n      container_id: defaultProps.containerId as ChartingLibraryWidgetOptions['container_id'],\r\n      library_path: defaultProps.libraryPath as string,\r\n      auto_save_delay: 5,\r\n\r\n      locale: 'en',\r\n      disabled_features: ['use_localstorage_for_settings'],\r\n      enabled_features: ['study_templates'],\r\n      load_last_chart: true,\r\n      client_id: defaultProps.clientId,\r\n      user_id: defaultProps.userId,\r\n      fullscreen: defaultProps.fullscreen,\r\n      autosize: defaultProps.autosize,\r\n      studies_overrides: defaultProps.studiesOverrides,\r\n      theme: defaultProps.theme === 'Dark' ? 'Dark' : 'Light',\r\n      overrides: {\r\n        ...savedProperties,\r\n        'mainSeriesProperties.candleStyle.upColor': '#41C77A',\r\n        'mainSeriesProperties.candleStyle.downColor': '#F23B69',\r\n        // 'mainSeriesProperties.candleStyle.borderColor': '#378658',\r\n        'mainSeriesProperties.candleStyle.borderUpColor': '#41C77A',\r\n        'mainSeriesProperties.candleStyle.borderDownColor': '#F23B69',\r\n        'mainSeriesProperties.candleStyle.wickUpColor': '#41C77A',\r\n        'mainSeriesProperties.candleStyle.wickDownColor': '#F23B69',\r\n      },\r\n      // @ts-ignore\r\n      save_load_adapter: saveLoadAdapter,\r\n      settings_adapter: {\r\n        initialSettings: {\r\n          'trading.orderPanelSettingsBroker': JSON.stringify({\r\n            showRelativePriceControl: false,\r\n            showCurrencyRiskInQty: false,\r\n            showPercentRiskInQty: false,\r\n            showBracketsInCurrency: false,\r\n            showBracketsInPercent: false,\r\n          }),\r\n          // \"proterty\"\r\n          'trading.chart.proterty':\r\n            localStorage.getItem('trading.chart.proterty') ||\r\n            JSON.stringify({\r\n              hideFloatingPanel: 1,\r\n            }),\r\n          'chart.favoriteDrawings':\r\n            localStorage.getItem('chart.favoriteDrawings') ||\r\n            JSON.stringify([]),\r\n          'chart.favoriteDrawingsPosition':\r\n            localStorage.getItem('chart.favoriteDrawingsPosition') ||\r\n            JSON.stringify({}),\r\n        },\r\n        setValue: (key, value) => {\r\n          localStorage.setItem(key, value);\r\n        },\r\n        removeValue: (key) => {\r\n          localStorage.removeItem(key);\r\n        },\r\n      },\r\n    };\r\n\r\n    const tvWidget = new widget(widgetOptions);\r\n\r\n    tvWidget.onChartReady(() => {\r\n      tvWidgetRef.current = tvWidget;\r\n      tvWidget\r\n        // @ts-ignore\r\n        .subscribe('onAutoSaveNeeded', () => tvWidget.saveChartToServer());\r\n    });\r\n  }, [chartProperties, datafeed, defaultProps.autosize, defaultProps.clientId, defaultProps.containerId, defaultProps.fullscreen, defaultProps.interval, defaultProps.libraryPath, defaultProps.studiesOverrides, defaultProps.theme, defaultProps.userId, marketName]);\r\n  return <div style={{ height: window.innerWidth < 1000 ? '50vh' : 540 }} id={defaultProps.containerId} className={'TVChartContainer'} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}