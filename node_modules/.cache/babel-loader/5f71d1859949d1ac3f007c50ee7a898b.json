{"ast":null,"code":"var _jsxFileName = \"/home/dev/Code/dex-ui/src/utils/preferences.tsx\";\n// import React, { useContext } from 'react';\n// import { useLocalStorageState } from './utils';\n// import { useInterval } from './useInterval';\n// import { useConnection } from './connection';\n// import { useWallet } from './wallet';\n// import {\n//   useAllMarkets,\n//   useSelectedTokenAccounts,\n//   useTokenAccounts,\n// } from './markets';\n// import { settleAllFunds } from './send';\n// import { PreferencesContextValues } from './types';\n// const PreferencesContext = React.createContext<PreferencesContextValues | null>(\n//   null,\n// );\n// export function PreferencesProvider({ children }) {\n//   const [autoSettleEnabled, setAutoSettleEnabled] = useLocalStorageState(\n//     'autoSettleEnabled',\n//     true,\n//   );\n//   const [tokenAccounts] = useTokenAccounts();\n//   const { connected, wallet } = useWallet();\n//   const [marketList] = useAllMarkets();\n//   const connection = useConnection();\n//   const [selectedTokenAccounts] = useSelectedTokenAccounts();\n//   useInterval(() => {\n//     const autoSettle = async () => {\n//       const markets = (marketList || []).map((m) => m.market);\n//       try {\n//         console.log('Auto settling');\n//         await settleAllFunds({\n//           connection,\n//           wallet,\n//           tokenAccounts: tokenAccounts || [],\n//           markets,\n//           selectedTokenAccounts,\n//         });\n//       } catch (e) {\n//         console.log('Error auto settling funds: ' + e.message);\n//       }\n//     };\n//     connected && wallet?.autoApprove && autoSettleEnabled && autoSettle();\n//   }, 10000);\nimport React, { useContext } from 'react';\nimport { sleep, useLocalStorageState } from './utils';\nimport { useInterval } from './useInterval';\nimport { useConnection } from './connection';\nimport { useWallet } from './wallet';\nimport { getCachedMarket, getCachedOpenOrderAccounts, getSelectedTokenAccountForMint, useCurrentlyAutoSettling, useMarketInfos, useTokenAccounts } from './markets';\nimport { settleFunds } from './send';\nimport { getAssociatedTokenAddress } from \"@project-serum/associated-token\";\nconst PreferencesContext = React.createContext(null);\nexport function PreferencesProvider({\n  children\n}) {\n  const [autoSettleEnabled, setAutoSettleEnabled] = useLocalStorageState('autoSettleEnabled', true);\n  const [tokenAccounts] = useTokenAccounts();\n  const {\n    connected,\n    wallet\n  } = useWallet();\n  const marketInfoList = useMarketInfos();\n  const [currentlyAutoSettling, setCurrentlyAutoSettling] = useCurrentlyAutoSettling();\n  const connection = useConnection();\n  useInterval(() => {\n    const autoSettle = async () => {\n      if (!wallet) {\n        return;\n      }\n\n      setCurrentlyAutoSettling(true);\n\n      for (const marketInfo of marketInfoList) {\n        try {\n          console.log(`Autosettling ${marketInfo.name} ${marketInfo.address.toString()}`);\n          const market = await getCachedMarket(connection, marketInfo.address, marketInfo.programId);\n          const openOrderAccounts = await getCachedOpenOrderAccounts(connection, market, wallet.publicKey); // settle funds into selected token wallets\n\n          const [baseAssocTokenAddress, quoteAssocTokenAddress] = await Promise.all([getAssociatedTokenAddress(wallet.publicKey, market.baseMintAddress), getAssociatedTokenAddress(wallet.publicKey, market.quoteMintAddress)]);\n          const baseCurrencyAccount = getSelectedTokenAccountForMint(tokenAccounts, market.baseMintAddress, baseAssocTokenAddress);\n          const quoteCurrencyAccount = getSelectedTokenAccountForMint(tokenAccounts, market.quoteMintAddress, quoteAssocTokenAddress);\n          const openOrders = openOrderAccounts.find(oo => oo.market.equals(marketInfo.address));\n\n          if (baseCurrencyAccount && quoteCurrencyAccount && openOrders) {\n            await settleFunds({\n              market,\n              openOrders,\n              connection,\n              wallet,\n              baseCurrencyAccount,\n              quoteCurrencyAccount\n            });\n            await sleep(1000);\n          }\n        } catch (e) {\n          console.log('Error auto settling funds: ' + e.message);\n        }\n      }\n\n      setCurrentlyAutoSettling(false);\n    };\n\n    connected && (wallet === null || wallet === void 0 ? void 0 : wallet.autoApprove) && autoSettleEnabled && !currentlyAutoSettling && autoSettle();\n  }, 60000);\n  return /*#__PURE__*/React.createElement(PreferencesContext.Provider, {\n    value: {\n      autoSettleEnabled,\n      setAutoSettleEnabled\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport function usePreferences() {\n  const context = useContext(PreferencesContext);\n\n  if (!context) {\n    throw new Error('Missing preferences context');\n  }\n\n  return {\n    autoSettleEnabled: context.autoSettleEnabled,\n    setAutoSettleEnabled: context.setAutoSettleEnabled\n  };\n}","map":{"version":3,"sources":["/home/dev/Code/dex-ui/src/utils/preferences.tsx"],"names":["React","useContext","sleep","useLocalStorageState","useInterval","useConnection","useWallet","getCachedMarket","getCachedOpenOrderAccounts","getSelectedTokenAccountForMint","useCurrentlyAutoSettling","useMarketInfos","useTokenAccounts","settleFunds","getAssociatedTokenAddress","PreferencesContext","createContext","PreferencesProvider","children","autoSettleEnabled","setAutoSettleEnabled","tokenAccounts","connected","wallet","marketInfoList","currentlyAutoSettling","setCurrentlyAutoSettling","connection","autoSettle","marketInfo","console","log","name","address","toString","market","programId","openOrderAccounts","publicKey","baseAssocTokenAddress","quoteAssocTokenAddress","Promise","all","baseMintAddress","quoteMintAddress","baseCurrencyAccount","quoteCurrencyAccount","openOrders","find","oo","equals","e","message","autoApprove","usePreferences","context","Error"],"mappings":"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","sourcesContent":["// import React, { useContext } from 'react';\r\n// import { useLocalStorageState } from './utils';\r\n// import { useInterval } from './useInterval';\r\n// import { useConnection } from './connection';\r\n// import { useWallet } from './wallet';\r\n// import {\r\n//   useAllMarkets,\r\n//   useSelectedTokenAccounts,\r\n//   useTokenAccounts,\r\n// } from './markets';\r\n// import { settleAllFunds } from './send';\r\n// import { PreferencesContextValues } from './types';\r\n\r\n// const PreferencesContext = React.createContext<PreferencesContextValues | null>(\r\n//   null,\r\n// );\r\n\r\n// export function PreferencesProvider({ children }) {\r\n//   const [autoSettleEnabled, setAutoSettleEnabled] = useLocalStorageState(\r\n//     'autoSettleEnabled',\r\n//     true,\r\n//   );\r\n\r\n//   const [tokenAccounts] = useTokenAccounts();\r\n//   const { connected, wallet } = useWallet();\r\n//   const [marketList] = useAllMarkets();\r\n//   const connection = useConnection();\r\n//   const [selectedTokenAccounts] = useSelectedTokenAccounts();\r\n\r\n//   useInterval(() => {\r\n//     const autoSettle = async () => {\r\n//       const markets = (marketList || []).map((m) => m.market);\r\n//       try {\r\n//         console.log('Auto settling');\r\n//         await settleAllFunds({\r\n//           connection,\r\n//           wallet,\r\n//           tokenAccounts: tokenAccounts || [],\r\n//           markets,\r\n//           selectedTokenAccounts,\r\n//         });\r\n//       } catch (e) {\r\n//         console.log('Error auto settling funds: ' + e.message);\r\n//       }\r\n//     };\r\n\r\n//     connected && wallet?.autoApprove && autoSettleEnabled && autoSettle();\r\n//   }, 10000);\r\n\r\nimport React, {useContext} from 'react';\r\nimport {sleep, useLocalStorageState} from './utils';\r\nimport {useInterval} from './useInterval';\r\nimport {useConnection} from './connection';\r\nimport {useWallet} from './wallet';\r\nimport {\r\n  getCachedMarket,\r\n  getCachedOpenOrderAccounts,\r\n  getSelectedTokenAccountForMint,\r\n  useCurrentlyAutoSettling,\r\n  useMarketInfos,\r\n  useTokenAccounts,\r\n} from './markets';\r\nimport {settleFunds} from './send';\r\nimport {PreferencesContextValues} from './types';\r\nimport {getAssociatedTokenAddress} from \"@project-serum/associated-token\";\r\n\r\nconst PreferencesContext = React.createContext<PreferencesContextValues | null>(\r\n  null,\r\n);\r\n\r\nexport function PreferencesProvider({ children }) {\r\n  const [autoSettleEnabled, setAutoSettleEnabled] = useLocalStorageState(\r\n    'autoSettleEnabled',\r\n    true,\r\n  );\r\n\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const { connected, wallet } = useWallet();\r\n  const marketInfoList = useMarketInfos();\r\n  const [currentlyAutoSettling, setCurrentlyAutoSettling] = useCurrentlyAutoSettling();\r\n  const connection = useConnection();\r\n\r\n  useInterval(() => {\r\n    const autoSettle = async () => {\r\n      if (!wallet) {\r\n        return;\r\n      }\r\n      setCurrentlyAutoSettling(true);\r\n      for (const marketInfo of marketInfoList) {\r\n        try {\r\n          console.log(`Autosettling ${marketInfo.name} ${marketInfo.address.toString()}`);\r\n          const market = await getCachedMarket(connection, marketInfo.address, marketInfo.programId);\r\n          const openOrderAccounts = await getCachedOpenOrderAccounts(connection, market, wallet.publicKey);\r\n          // settle funds into selected token wallets\r\n          const [baseAssocTokenAddress, quoteAssocTokenAddress] = await Promise.all([\r\n            getAssociatedTokenAddress(wallet.publicKey, market.baseMintAddress),\r\n            getAssociatedTokenAddress(wallet.publicKey, market.quoteMintAddress)\r\n          ]);\r\n          const baseCurrencyAccount = getSelectedTokenAccountForMint(\r\n            tokenAccounts, market.baseMintAddress, baseAssocTokenAddress);\r\n          const quoteCurrencyAccount = getSelectedTokenAccountForMint(\r\n            tokenAccounts, market.quoteMintAddress, quoteAssocTokenAddress);\r\n          const openOrders = openOrderAccounts.find(oo => oo.market.equals(marketInfo.address));\r\n          if (baseCurrencyAccount && quoteCurrencyAccount && openOrders) {\r\n            await settleFunds({\r\n              market, openOrders, connection, wallet, baseCurrencyAccount, quoteCurrencyAccount\r\n            });\r\n            await sleep(1000);\r\n          }\r\n        } catch (e) {\r\n          console.log('Error auto settling funds: ' + e.message);\r\n        }\r\n      }\r\n      setCurrentlyAutoSettling(false);\r\n    };\r\n    (\r\n      connected &&\r\n      wallet?.autoApprove &&\r\n      autoSettleEnabled &&\r\n      !currentlyAutoSettling &&\r\n      autoSettle()\r\n    );\r\n  }, 60000);\r\n\r\n  return (\r\n    <PreferencesContext.Provider\r\n      value={{\r\n        autoSettleEnabled,\r\n        setAutoSettleEnabled,\r\n      }}\r\n    >\r\n      {children}\r\n    </PreferencesContext.Provider>\r\n  );\r\n}\r\n\r\nexport function usePreferences() {\r\n  const context = useContext(PreferencesContext);\r\n  if (!context) {\r\n    throw new Error('Missing preferences context');\r\n  }\r\n  return {\r\n    autoSettleEnabled: context.autoSettleEnabled,\r\n    setAutoSettleEnabled: context.setAutoSettleEnabled,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}