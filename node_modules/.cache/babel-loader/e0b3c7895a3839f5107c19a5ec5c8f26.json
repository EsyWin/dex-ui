{"ast":null,"code":"import * as BufferLayout from 'buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { useAllMarkets, useCustomMarkets, useTokenAccounts } from './markets';\nimport BN from 'bn.js';\nimport { TOKEN_MINTS } from '@project-serum/serum';\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions'; // @ts-ignore\n\nimport { cloneDeep } from 'lodash-es';\nimport { getMultipleSolanaAccounts } from './send';\nimport tuple from 'immutable-tuple';\nimport { useAsyncData } from './fetch-loop';\nimport { useConnection } from './connection';\nimport { useMemo } from 'react';\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([BufferLayout.blob(32, 'mint'), BufferLayout.blob(32, 'owner'), BufferLayout.nu64('amount'), BufferLayout.blob(93)]);\nexport const MINT_LAYOUT = BufferLayout.struct([BufferLayout.blob(36), BufferLayout.blob(8, 'supply'), BufferLayout.u8('decimals'), BufferLayout.u8('initialized'), BufferLayout.blob(36)]);\nexport function parseTokenAccountData(data) {\n  let {\n    mint,\n    owner,\n    amount\n  } = ACCOUNT_LAYOUT.decode(data);\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount\n  };\n}\nexport function parseTokenMintData(data) {\n  let {\n    decimals,\n    initialized,\n    supply\n  } = MINT_LAYOUT.decode(data);\n  return {\n    decimals,\n    initialized: !!initialized,\n    supply: new BN(supply, 10, 'le')\n  };\n}\nexport function getOwnedAccountsFilters(publicKey) {\n  return [{\n    memcmp: {\n      offset: ACCOUNT_LAYOUT.offsetOf('owner'),\n      bytes: publicKey.toBase58()\n    }\n  }, {\n    dataSize: ACCOUNT_LAYOUT.span\n  }];\n}\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\nexport async function getOwnedTokenAccounts(connection, publicKey) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  let resp = await connection.getProgramAccounts(TOKEN_PROGRAM_ID, {\n    filters\n  });\n  return resp.map(({\n    pubkey,\n    account: {\n      data,\n      executable,\n      owner,\n      lamports\n    }\n  }) => ({\n    publicKey: new PublicKey(pubkey),\n    accountInfo: {\n      data,\n      executable,\n      owner: new PublicKey(owner),\n      lamports\n    }\n  }));\n}\nexport async function getTokenAccountInfo(connection, ownerAddress) {\n  let [splAccounts, account] = await Promise.all([getOwnedTokenAccounts(connection, ownerAddress), connection.getAccountInfo(ownerAddress)]);\n  const parsedSplAccounts = splAccounts.map(({\n    publicKey,\n    accountInfo\n  }) => {\n    return {\n      pubkey: publicKey,\n      account: accountInfo,\n      effectiveMint: parseTokenAccountData(accountInfo.data).mint\n    };\n  });\n  return parsedSplAccounts.concat({\n    pubkey: ownerAddress,\n    account,\n    effectiveMint: WRAPPED_SOL_MINT\n  });\n}\nexport function useMintToTickers() {\n  const {\n    customMarkets\n  } = useCustomMarkets();\n  const [markets] = useAllMarkets();\n  return useMemo(() => {\n    const mintsToTickers = Object.fromEntries(TOKEN_MINTS.map(mint => [mint.address.toBase58(), mint.name]));\n\n    for (let market of markets || []) {\n      const customMarketInfo = customMarkets.find(customMarket => customMarket.address === market.market.address.toBase58());\n\n      if (!(market.market.baseMintAddress.toBase58() in mintsToTickers)) {\n        if (customMarketInfo) {\n          mintsToTickers[market.market.baseMintAddress.toBase58()] = customMarketInfo.baseLabel || `${customMarketInfo.name}_BASE`;\n        }\n      }\n\n      if (!(market.market.quoteMintAddress.toBase58() in mintsToTickers)) {\n        if (customMarketInfo) {\n          mintsToTickers[market.market.quoteMintAddress.toBase58()] = customMarketInfo.quoteLabel || `${customMarketInfo.name}_QUOTE`;\n        }\n      }\n    }\n\n    return mintsToTickers; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [markets === null || markets === void 0 ? void 0 : markets.length, customMarkets.length]);\n}\n\nconst _VERY_SLOW_REFRESH_INTERVAL = 5000 * 1000;\n\nexport function useMintInfos() {\n  const connection = useConnection();\n  const [tokenAccounts] = useTokenAccounts();\n  const [allMarkets] = useAllMarkets();\n  const allMints = (tokenAccounts || []).map(account => account.effectiveMint).concat((allMarkets || []).map(marketInfo => marketInfo.market.baseMintAddress)).concat((allMarkets || []).map(marketInfo => marketInfo.market.quoteMintAddress));\n  const uniqueMints = [...new Set(allMints.map(mint => mint.toBase58()))].map(stringMint => new PublicKey(stringMint));\n\n  const getAllMintInfo = async () => {\n    const mintInfos = await getMultipleSolanaAccounts(connection, uniqueMints);\n    return Object.fromEntries(Object.entries(mintInfos.value).map(([key, accountInfo]) => [key, accountInfo && parseTokenMintData(accountInfo.data)]));\n  };\n\n  return useAsyncData(getAllMintInfo, tuple('getAllMintInfo', connection, (tokenAccounts || []).length, (allMarkets || []).length), {\n    refreshInterval: _VERY_SLOW_REFRESH_INTERVAL\n  });\n}\nexport function getTokenByMintAddress(mintAddress) {\n  if (mintAddress === NATIVE_SOL.mintAddress) {\n    return cloneDeep(NATIVE_SOL);\n  }\n\n  let token = null;\n\n  for (const symbol of Object.keys(TOKENS)) {\n    const info = cloneDeep(TOKENS[symbol]);\n\n    if (info.mintAddress === mintAddress) {\n      token = info;\n    }\n  }\n\n  return token;\n}\nexport const NATIVE_SOL = {\n  symbol: 'SOL',\n  name: 'Native Solana',\n  mintAddress: '11111111111111111111111111111111',\n  decimals: 9\n};\nexport const TOKENS = {\n  WSOL: {\n    symbol: 'WSOL',\n    mintAddress: 'So11111111111111111111111111111111111111112',\n    referrer: 'HTcarLHe7WRxBQCWvhVB8AP56pnEtJUV2jDGvcpY3xo5'\n  },\n  BTC: {\n    symbol: 'BTC',\n    mintAddress: '9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E',\n    referrer: 'GZpS8cY8Nt8HuqxzJh6PXTdSxc38vFUjBmi7eEUkkQtG'\n  },\n  soETH: {\n    symbol: 'soETH',\n    mintAddress: '2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk',\n    referrer: 'CXPTcSxxh4AT38gtv3SPbLS7oZVgXzLbMb83o4ziXjjN'\n  },\n  USDT: {\n    symbol: 'USDT',\n    mintAddress: 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',\n    referrer: '8DwwDNagph8SdwMUdcXS5L9YAyutTyDJmK6cTKrmNFk3'\n  },\n  soUSDT: {\n    symbol: 'soUSDT',\n    mintAddress: 'BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4',\n    referrer: 'CA98hYunCLKgBuD6N8MJSgq1GbW9CXdksLf5mw736tS3'\n  },\n  USDC: {\n    symbol: 'USDC',\n    mintAddress: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    referrer: '92vdtNjEg6Zth3UU1MgPgTVFjSEzTHx66aCdqWdcRkrg'\n  },\n  RAY: {\n    symbol: 'RAY',\n    mintAddress: '4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R',\n    referrer: '33XpMmMQRf6tSPpmYyzpwU4uXpZHkFwCZsusD9dMYkjy'\n  }\n};","map":{"version":3,"sources":["/home/dev/Code/dex-ui/src/utils/tokens.tsx"],"names":["BufferLayout","PublicKey","useAllMarkets","useCustomMarkets","useTokenAccounts","BN","TOKEN_MINTS","WRAPPED_SOL_MINT","cloneDeep","getMultipleSolanaAccounts","tuple","useAsyncData","useConnection","useMemo","ACCOUNT_LAYOUT","struct","blob","nu64","MINT_LAYOUT","u8","parseTokenAccountData","data","mint","owner","amount","decode","parseTokenMintData","decimals","initialized","supply","getOwnedAccountsFilters","publicKey","memcmp","offset","offsetOf","bytes","toBase58","dataSize","span","TOKEN_PROGRAM_ID","getOwnedTokenAccounts","connection","filters","resp","getProgramAccounts","map","pubkey","account","executable","lamports","accountInfo","getTokenAccountInfo","ownerAddress","splAccounts","Promise","all","getAccountInfo","parsedSplAccounts","effectiveMint","concat","useMintToTickers","customMarkets","markets","mintsToTickers","Object","fromEntries","address","name","market","customMarketInfo","find","customMarket","baseMintAddress","baseLabel","quoteMintAddress","quoteLabel","length","_VERY_SLOW_REFRESH_INTERVAL","useMintInfos","tokenAccounts","allMarkets","allMints","marketInfo","uniqueMints","Set","stringMint","getAllMintInfo","mintInfos","entries","value","key","refreshInterval","getTokenByMintAddress","mintAddress","NATIVE_SOL","token","symbol","keys","TOKENS","info","WSOL","referrer","BTC","soETH","USDT","soUSDT","USDC","RAY"],"mappings":"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","sourcesContent":["import * as BufferLayout from 'buffer-layout';\r\n\r\nimport { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\r\nimport { useAllMarkets, useCustomMarkets, useTokenAccounts } from './markets';\r\n\r\nimport BN from 'bn.js';\r\nimport { TOKEN_MINTS } from '@project-serum/serum';\r\nimport { TokenAccount } from './types';\r\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\r\n// @ts-ignore\r\nimport { cloneDeep } from 'lodash-es'\r\nimport { getMultipleSolanaAccounts } from './send';\r\nimport tuple from 'immutable-tuple';\r\nimport { useAsyncData } from './fetch-loop';\r\nimport { useConnection } from './connection';\r\nimport { useMemo } from 'react';\r\n\r\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([\r\n  BufferLayout.blob(32, 'mint'),\r\n  BufferLayout.blob(32, 'owner'),\r\n  BufferLayout.nu64('amount'),\r\n  BufferLayout.blob(93),\r\n]);\r\n\r\nexport const MINT_LAYOUT = BufferLayout.struct([\r\n  BufferLayout.blob(36),\r\n  BufferLayout.blob(8, 'supply'),\r\n  BufferLayout.u8('decimals'),\r\n  BufferLayout.u8('initialized'),\r\n  BufferLayout.blob(36),\r\n]);\r\n\r\nexport function parseTokenAccountData(\r\n  data: Buffer,\r\n): { mint: PublicKey; owner: PublicKey; amount: number } {\r\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\r\n  return {\r\n    mint: new PublicKey(mint),\r\n    owner: new PublicKey(owner),\r\n    amount,\r\n  };\r\n}\r\n\r\nexport interface MintInfo {\r\n  decimals: number;\r\n  initialized: boolean;\r\n  supply: BN;\r\n}\r\n\r\nexport function parseTokenMintData(data): MintInfo {\r\n  let { decimals, initialized, supply } = MINT_LAYOUT.decode(data);\r\n  return {\r\n    decimals,\r\n    initialized: !!initialized,\r\n    supply: new BN(supply, 10, 'le'),\r\n  };\r\n}\r\n\r\nexport function getOwnedAccountsFilters(publicKey: PublicKey) {\r\n  return [\r\n    {\r\n      memcmp: {\r\n        offset: ACCOUNT_LAYOUT.offsetOf('owner'),\r\n        bytes: publicKey.toBase58(),\r\n      },\r\n    },\r\n    {\r\n      dataSize: ACCOUNT_LAYOUT.span,\r\n    },\r\n  ];\r\n}\r\n\r\nexport const TOKEN_PROGRAM_ID = new PublicKey(\r\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\r\n);\r\n\r\nexport async function getOwnedTokenAccounts(\r\n  connection: Connection,\r\n  publicKey: PublicKey,\r\n): Promise<Array<{ publicKey: PublicKey; accountInfo: AccountInfo<Buffer> }>> {\r\n  let filters = getOwnedAccountsFilters(publicKey);\r\n  let resp = await connection.getProgramAccounts(\r\n    TOKEN_PROGRAM_ID,\r\n    {\r\n      filters,\r\n    },\r\n  );\r\n  return resp\r\n    .map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\r\n      publicKey: new PublicKey(pubkey),\r\n      accountInfo: {\r\n        data,\r\n        executable,\r\n        owner: new PublicKey(owner),\r\n        lamports,\r\n      },\r\n    }))\r\n}\r\n\r\nexport async function getTokenAccountInfo(\r\n  connection: Connection,\r\n  ownerAddress: PublicKey,\r\n) {\r\n  let [splAccounts, account] = await Promise.all([\r\n    getOwnedTokenAccounts(connection, ownerAddress),\r\n    connection.getAccountInfo(ownerAddress),\r\n  ]);\r\n  const parsedSplAccounts: TokenAccount[] = splAccounts.map(\r\n    ({ publicKey, accountInfo }) => {\r\n      return {\r\n        pubkey: publicKey,\r\n        account: accountInfo,\r\n        effectiveMint: parseTokenAccountData(accountInfo.data).mint,\r\n      };\r\n    },\r\n  );\r\n  return parsedSplAccounts.concat({\r\n    pubkey: ownerAddress,\r\n    account,\r\n    effectiveMint: WRAPPED_SOL_MINT,\r\n  });\r\n}\r\n\r\nexport function useMintToTickers(): { [mint: string]: string } {\r\n  const { customMarkets } = useCustomMarkets();\r\n  const [markets] = useAllMarkets();\r\n  return useMemo(() => {\r\n    const mintsToTickers = Object.fromEntries(\r\n      TOKEN_MINTS.map((mint) => [mint.address.toBase58(), mint.name]),\r\n    );\r\n    for (let market of markets || []) {\r\n      const customMarketInfo = customMarkets.find(\r\n        (customMarket) =>\r\n          customMarket.address === market.market.address.toBase58(),\r\n      );\r\n      if (!(market.market.baseMintAddress.toBase58() in mintsToTickers)) {\r\n        if (customMarketInfo) {\r\n          mintsToTickers[market.market.baseMintAddress.toBase58()] =\r\n            customMarketInfo.baseLabel || `${customMarketInfo.name}_BASE`;\r\n        }\r\n      }\r\n      if (!(market.market.quoteMintAddress.toBase58() in mintsToTickers)) {\r\n        if (customMarketInfo) {\r\n          mintsToTickers[market.market.quoteMintAddress.toBase58()] =\r\n            customMarketInfo.quoteLabel || `${customMarketInfo.name}_QUOTE`;\r\n        }\r\n      }\r\n    }\r\n    return mintsToTickers;\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [markets?.length, customMarkets.length]);\r\n}\r\n\r\nconst _VERY_SLOW_REFRESH_INTERVAL = 5000 * 1000;\r\n\r\nexport function useMintInfos(): [\r\n  (\r\n    | {\r\n        [mintAddress: string]: {\r\n          decimals: number;\r\n          initialized: boolean;\r\n        } | null;\r\n      }\r\n    | null\r\n    | undefined\r\n  ),\r\n  boolean,\r\n] {\r\n  const connection = useConnection();\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const [allMarkets] = useAllMarkets();\r\n\r\n  const allMints = (tokenAccounts || [])\r\n    .map((account) => account.effectiveMint)\r\n    .concat(\r\n      (allMarkets || []).map((marketInfo) => marketInfo.market.baseMintAddress),\r\n    )\r\n    .concat(\r\n      (allMarkets || []).map(\r\n        (marketInfo) => marketInfo.market.quoteMintAddress,\r\n      ),\r\n    );\r\n  const uniqueMints = [...new Set(allMints.map((mint) => mint.toBase58()))].map(\r\n    (stringMint) => new PublicKey(stringMint),\r\n  );\r\n\r\n  const getAllMintInfo = async () => {\r\n    const mintInfos = await getMultipleSolanaAccounts(connection, uniqueMints);\r\n    return Object.fromEntries(\r\n      Object.entries(mintInfos.value).map(([key, accountInfo]) => [\r\n        key,\r\n        accountInfo && parseTokenMintData(accountInfo.data),\r\n      ]),\r\n    );\r\n  };\r\n\r\n  return useAsyncData(\r\n    getAllMintInfo,\r\n    tuple(\r\n      'getAllMintInfo',\r\n      connection,\r\n      (tokenAccounts || []).length,\r\n      (allMarkets || []).length,\r\n    ),\r\n    { refreshInterval: _VERY_SLOW_REFRESH_INTERVAL },\r\n  );\r\n}\r\n\r\ninterface Tokens {\r\n  [key: string]: any\r\n  [index: number]: any\r\n}\r\n\r\nexport interface TokenInfo {\r\n  symbol: string\r\n  name: string\r\n\r\n  mintAddress: string\r\n  decimals: number\r\n\r\n  referrer?: string\r\n}\r\n\r\n\r\nexport function getTokenByMintAddress(mintAddress: string): TokenInfo | null {\r\n  if (mintAddress === NATIVE_SOL.mintAddress) {\r\n    return cloneDeep(NATIVE_SOL)\r\n  }\r\n\r\n  let token = null\r\n\r\n  for (const symbol of Object.keys(TOKENS)) {\r\n    const info = cloneDeep(TOKENS[symbol])\r\n\r\n    if (info.mintAddress === mintAddress) {\r\n      token = info\r\n    }\r\n  }\r\n\r\n  return token\r\n}\r\n\r\nexport const NATIVE_SOL: TokenInfo = {\r\n  symbol: 'SOL',\r\n  name: 'Native Solana',\r\n  mintAddress: '11111111111111111111111111111111',\r\n  decimals: 9\r\n}\r\n\r\n\r\nexport const TOKENS: Tokens = {\r\n  WSOL: {\r\n    symbol: 'WSOL',\r\n    mintAddress: 'So11111111111111111111111111111111111111112',\r\n    referrer: 'HTcarLHe7WRxBQCWvhVB8AP56pnEtJUV2jDGvcpY3xo5',\r\n  },\r\n  BTC: {\r\n    symbol: 'BTC',\r\n    mintAddress: '9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E',\r\n    referrer: 'GZpS8cY8Nt8HuqxzJh6PXTdSxc38vFUjBmi7eEUkkQtG',\r\n  },\r\n  soETH: {\r\n    symbol: 'soETH',\r\n    mintAddress: '2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk',\r\n    referrer: 'CXPTcSxxh4AT38gtv3SPbLS7oZVgXzLbMb83o4ziXjjN',\r\n  },\r\n  USDT: {\r\n    symbol: 'USDT',\r\n    mintAddress: 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',\r\n    referrer: '8DwwDNagph8SdwMUdcXS5L9YAyutTyDJmK6cTKrmNFk3',\r\n  },\r\n  soUSDT: {\r\n    symbol: 'soUSDT',\r\n    mintAddress: 'BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4',\r\n    referrer: 'CA98hYunCLKgBuD6N8MJSgq1GbW9CXdksLf5mw736tS3',\r\n  },\r\n  USDC: {\r\n    symbol: 'USDC',\r\n    mintAddress: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\r\n    referrer: '92vdtNjEg6Zth3UU1MgPgTVFjSEzTHx66aCdqWdcRkrg',\r\n  },\r\n  RAY: {\r\n    symbol: 'RAY',\r\n    mintAddress: '4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R',\r\n    referrer: '33XpMmMQRf6tSPpmYyzpwU4uXpZHkFwCZsusD9dMYkjy',\r\n  },\r\n}\r\n"]},"metadata":{},"sourceType":"module"}