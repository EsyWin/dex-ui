{"ast":null,"code":"var _jsxFileName = \"/home/dev/Code/dex-ui/src/pages/pools/NewPoolPage.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { AutoComplete, Button, Form, Input, Switch, Tooltip, Typography } from 'antd';\nimport { PublicKey } from '@solana/web3.js';\nimport { useConnection } from '../../utils/connection';\nimport FloatingElement from '../../components/layout/FloatingElement';\nimport styled from 'styled-components';\nimport { useWallet } from '../../utils/wallet';\nimport { sendSignedTransaction, signTransactions } from '../../utils/send';\nimport { useMintInput } from '../../components/useMintInput';\nimport { PoolTransactions } from '@project-serum/pool';\nimport { useTokenAccounts } from '../../utils/markets';\nimport BN from 'bn.js';\nimport { notify } from '../../utils/notifications';\nimport Link from '../../components/Link';\nconst {\n  Text,\n  Title\n} = Typography;\nconst Wrapper = styled.div`\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 24px;\n  margin-bottom: 24px;\n`;\nconst AddRemoveTokenButtons = styled.div`\n  margin-top: 16px;\n  margin-bottom: 16px;\n`;\nconst SIMPLE_POOL_PROGRAM_ID = '71JS8f7y7ASMbuuSMCVG7a3qDdcVco2qYD6bMJeZqUCm';\nconst ADMIN_CONTROLLED_POOL_PROGRAM_ID = 'WvmTNLpGMVbwJVYztYL4Hnsy82cJhQorxjnnXcRm3b6';\nconst DEFAULT_PROGRAM_ID = ADMIN_CONTROLLED_POOL_PROGRAM_ID;\nconst PROGRAM_ID_OPTIONS = [{\n  label: `Simple Pool (${SIMPLE_POOL_PROGRAM_ID})`,\n  value: SIMPLE_POOL_PROGRAM_ID\n}, {\n  label: `Admin-Controlled Pool (${ADMIN_CONTROLLED_POOL_PROGRAM_ID})`,\n  value: ADMIN_CONTROLLED_POOL_PROGRAM_ID\n}];\nexport default function NewPoolPage() {\n  const connection = useConnection();\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const [poolName, setPoolName] = useState('');\n  const [programId, setProgramId] = useState(DEFAULT_PROGRAM_ID);\n  const [initialSupply, setInitialSupply] = useState('1');\n  const [initialAssets, setInitialAssets] = useState([{\n    valid: false\n  }, {\n    valid: false\n  }]);\n  const [adminControlled, setAdminControlled] = useState(false);\n  const [adminAddress, setAdminAddress] = useState('');\n  const [tokenAccounts] = useTokenAccounts();\n  const [submitting, setSubmitting] = useState(false);\n  const [newPoolAddress, setNewPoolAddress] = useState(null);\n  useEffect(() => {\n    if (programId === SIMPLE_POOL_PROGRAM_ID) {\n      setAdminControlled(false);\n    } else if (programId === ADMIN_CONTROLLED_POOL_PROGRAM_ID) {\n      setAdminControlled(true);\n    }\n  }, [programId]);\n  useEffect(() => {\n    if (connected && wallet) {\n      setAdminAddress(wallet.publicKey.toBase58());\n    }\n  }, [wallet, connected]);\n  const canSubmit = connected && poolName.trim() && programId && parseFloat(initialSupply) > 0 && initialAssets.every(asset => asset.valid) && tokenAccounts && (adminAddress || !adminControlled);\n\n  async function onSubmit() {\n    if (!canSubmit || !wallet) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    try {\n      const assets = initialAssets;\n      const [poolAddress, transactionsAndSigners] = await PoolTransactions.initializeSimplePool({\n        connection,\n        programId: new PublicKey(programId),\n        poolName,\n        poolStateSpace: 1024,\n        poolMintDecimals: 6,\n        initialPoolMintSupply: new BN(Math.round(10 ** 6 * parseFloat(initialSupply))),\n        assetMints: assets.map(asset => asset.mint),\n        initialAssetQuantities: assets.map(asset => new BN(asset.quantity)),\n        creator: wallet.publicKey,\n        creatorAssets: assets.map(asset => {\n          const found = tokenAccounts === null || tokenAccounts === void 0 ? void 0 : tokenAccounts.find(tokenAccount => tokenAccount.effectiveMint.equals(asset.mint));\n\n          if (!found) {\n            throw new Error('No token account for ' + asset.mint.toBase58());\n          }\n\n          return found.pubkey;\n        }),\n        additionalAccounts: adminControlled ? [{\n          pubkey: new PublicKey(adminAddress),\n          isSigner: false,\n          isWritable: false\n        }] : []\n      });\n      const signed = await signTransactions({\n        transactionsAndSigners,\n        wallet,\n        connection\n      });\n\n      for (let signedTransaction of signed) {\n        await sendSignedTransaction({\n          signedTransaction,\n          connection\n        });\n      }\n\n      setNewPoolAddress(poolAddress);\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error creating new pool',\n        description: e.message,\n        type: 'error'\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FloatingElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    level: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, \"Create new pool\"), /*#__PURE__*/React.createElement(Form, {\n    layout: \"vertical\",\n    onFinish: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: /*#__PURE__*/React.createElement(Tooltip, {\n      title: \"Public name of the pool.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }, \"Pool Name\"),\n    name: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: poolName,\n    onChange: e => setPoolName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: /*#__PURE__*/React.createElement(Tooltip, {\n      title: \"Address of the pool program.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 15\n      }\n    }, \"Program ID\", ' ', /*#__PURE__*/React.createElement(Text, {\n      type: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }\n    }, \"(e.g. \", DEFAULT_PROGRAM_ID, \")\")),\n    name: \"programId\",\n    initialValue: DEFAULT_PROGRAM_ID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AutoComplete, {\n    value: programId,\n    onChange: value => setProgramId(value),\n    options: PROGRAM_ID_OPTIONS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: /*#__PURE__*/React.createElement(Tooltip, {\n      title: \"Initial number of pool tokens to mint to your account.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    }, \"Initial Pool Token Supply\"),\n    name: \"initialSupply\",\n    initialValue: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: initialSupply,\n    onChange: e => setInitialSupply(e.target.value.trim()),\n    type: \"number\",\n    min: \"0\",\n    step: \"any\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(AddRemoveTokenButtons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setInitialAssets(assets => assets.concat({\n      valid: false\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, \"Add token\"), ' ', /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setInitialAssets(assets => assets.slice(0, assets.length - 1)),\n    disabled: initialAssets.length <= 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  }, \"Remove token\")), initialAssets.map((asset, i) => /*#__PURE__*/React.createElement(AssetInput, {\n    setInitialAssets: setInitialAssets,\n    index: i,\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: /*#__PURE__*/React.createElement(Tooltip, {\n      title: \"Whether the assets in the pool can be controlled by the pool admin.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 15\n      }\n    }, \"Admin Controlled\"),\n    name: \"adminControlled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    checked: adminControlled,\n    onChange: checked => setAdminControlled(checked),\n    disabled: programId === SIMPLE_POOL_PROGRAM_ID || programId === ADMIN_CONTROLLED_POOL_PROGRAM_ID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  })), adminControlled ? /*#__PURE__*/React.createElement(Form.Item, {\n    label: /*#__PURE__*/React.createElement(Tooltip, {\n      title: \"Address of the pool admin account.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }\n    }, \"Admin Address\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: adminAddress,\n    onChange: e => setAdminAddress(e.target.value.trim()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 15\n    }\n  })) : null, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \" \",\n    colon: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: !canSubmit,\n    loading: submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }\n  }, connected ? 'Submit' : 'Not connected to wallet')))), newPoolAddress ? /*#__PURE__*/React.createElement(FloatingElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }\n  }, \"New pool address:\", ' ', /*#__PURE__*/React.createElement(Link, {\n    to: `/pools/${newPoolAddress.toBase58()}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }\n  }, newPoolAddress.toBase58()))) : null);\n}\n\nfunction AssetInput({\n  setInitialAssets,\n  index\n}) {\n  const [mintInput, mintInfo] = useMintInput(`mint${index}`, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 5\n    }\n  }, \"Token \", index + 1, \" Mint Address\"), /*#__PURE__*/React.createElement(React.Fragment, null, \"Token mint address for token \", index + 1, \".\"));\n  const [quantity, setQuantity] = useState('');\n  useEffect(() => {\n    let change;\n\n    if (mintInfo && parseFloat(quantity) >= 0) {\n      let parsedQuantity = Math.round(10 ** mintInfo.decimals * parseFloat(quantity));\n      change = {\n        mint: mintInfo.address,\n        quantity: parsedQuantity,\n        valid: true\n      };\n    } else {\n      change = {\n        valid: false\n      };\n    }\n\n    setInitialAssets(assets => assets.map((old, i) => i === index ? change : old));\n  }, [setInitialAssets, index, mintInfo, quantity]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mintInput, /*#__PURE__*/React.createElement(Form.Item, {\n    label: /*#__PURE__*/React.createElement(Tooltip, {\n      title: /*#__PURE__*/React.createElement(React.Fragment, null, \"Initial quantity of token \", index + 1, \" to deposit into the pool.\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }\n    }, \"Token \", index + 1, \" Initial Quantity\"),\n    name: `quantity${index}`,\n    validateStatus: 'success',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: quantity,\n    onChange: e => setQuantity(e.target.value.trim()),\n    type: \"number\",\n    min: \"0\",\n    step: \"any\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/home/dev/Code/dex-ui/src/pages/pools/NewPoolPage.tsx"],"names":["React","useEffect","useState","AutoComplete","Button","Form","Input","Switch","Tooltip","Typography","PublicKey","useConnection","FloatingElement","styled","useWallet","sendSignedTransaction","signTransactions","useMintInput","PoolTransactions","useTokenAccounts","BN","notify","Link","Text","Title","Wrapper","div","AddRemoveTokenButtons","SIMPLE_POOL_PROGRAM_ID","ADMIN_CONTROLLED_POOL_PROGRAM_ID","DEFAULT_PROGRAM_ID","PROGRAM_ID_OPTIONS","label","value","NewPoolPage","connection","wallet","connected","poolName","setPoolName","programId","setProgramId","initialSupply","setInitialSupply","initialAssets","setInitialAssets","valid","adminControlled","setAdminControlled","adminAddress","setAdminAddress","tokenAccounts","submitting","setSubmitting","newPoolAddress","setNewPoolAddress","publicKey","toBase58","canSubmit","trim","parseFloat","every","asset","onSubmit","assets","poolAddress","transactionsAndSigners","initializeSimplePool","poolStateSpace","poolMintDecimals","initialPoolMintSupply","Math","round","assetMints","map","mint","initialAssetQuantities","quantity","creator","creatorAssets","found","find","tokenAccount","effectiveMint","equals","Error","pubkey","additionalAccounts","isSigner","isWritable","signed","signedTransaction","e","console","warn","message","description","type","target","concat","slice","length","i","checked","AssetInput","index","mintInput","mintInfo","setQuantity","change","parsedQuantity","decimals","address","old"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  AutoComplete,\r\n  Button,\r\n  Form,\r\n  Input,\r\n  Switch,\r\n  Tooltip,\r\n  Typography,\r\n} from 'antd';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { useConnection } from '../../utils/connection';\r\nimport FloatingElement from '../../components/layout/FloatingElement';\r\nimport styled from 'styled-components';\r\nimport { useWallet } from '../../utils/wallet';\r\nimport { sendSignedTransaction, signTransactions } from '../../utils/send';\r\nimport { useMintInput } from '../../components/useMintInput';\r\nimport { PoolTransactions } from '@project-serum/pool';\r\nimport { useTokenAccounts } from '../../utils/markets';\r\nimport BN from 'bn.js';\r\nimport { notify } from '../../utils/notifications';\r\nimport Link from '../../components/Link';\r\n\r\nconst { Text, Title } = Typography;\r\n\r\nconst Wrapper = styled.div`\r\n  max-width: 800px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 24px;\r\n  margin-bottom: 24px;\r\n`;\r\n\r\nconst AddRemoveTokenButtons = styled.div`\r\n  margin-top: 16px;\r\n  margin-bottom: 16px;\r\n`;\r\n\r\nconst SIMPLE_POOL_PROGRAM_ID = '71JS8f7y7ASMbuuSMCVG7a3qDdcVco2qYD6bMJeZqUCm';\r\nconst ADMIN_CONTROLLED_POOL_PROGRAM_ID =\r\n  'WvmTNLpGMVbwJVYztYL4Hnsy82cJhQorxjnnXcRm3b6';\r\nconst DEFAULT_PROGRAM_ID = ADMIN_CONTROLLED_POOL_PROGRAM_ID;\r\nconst PROGRAM_ID_OPTIONS = [\r\n  {\r\n    label: `Simple Pool (${SIMPLE_POOL_PROGRAM_ID})`,\r\n    value: SIMPLE_POOL_PROGRAM_ID,\r\n  },\r\n  {\r\n    label: `Admin-Controlled Pool (${ADMIN_CONTROLLED_POOL_PROGRAM_ID})`,\r\n    value: ADMIN_CONTROLLED_POOL_PROGRAM_ID,\r\n  },\r\n];\r\n\r\nexport default function NewPoolPage() {\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [poolName, setPoolName] = useState('');\r\n  const [programId, setProgramId] = useState(DEFAULT_PROGRAM_ID);\r\n  const [initialSupply, setInitialSupply] = useState('1');\r\n  const [initialAssets, setInitialAssets] = useState<InitialAsset[]>([\r\n    { valid: false },\r\n    { valid: false },\r\n  ]);\r\n  const [adminControlled, setAdminControlled] = useState(false);\r\n  const [adminAddress, setAdminAddress] = useState('');\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [newPoolAddress, setNewPoolAddress] = useState<PublicKey | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (programId === SIMPLE_POOL_PROGRAM_ID) {\r\n      setAdminControlled(false);\r\n    } else if (programId === ADMIN_CONTROLLED_POOL_PROGRAM_ID) {\r\n      setAdminControlled(true);\r\n    }\r\n  }, [programId]);\r\n\r\n  useEffect(() => {\r\n    if (connected && wallet) {\r\n      setAdminAddress(wallet.publicKey.toBase58());\r\n    }\r\n  }, [wallet, connected]);\r\n\r\n  const canSubmit =\r\n    connected &&\r\n    poolName.trim() &&\r\n    programId &&\r\n    parseFloat(initialSupply) > 0 &&\r\n    initialAssets.every((asset) => asset.valid) &&\r\n    tokenAccounts &&\r\n    (adminAddress || !adminControlled);\r\n\r\n  async function onSubmit() {\r\n    if (!canSubmit || !wallet) {\r\n      return;\r\n    }\r\n    setSubmitting(true);\r\n    try {\r\n      const assets = initialAssets as ValidInitialAsset[];\r\n      const [\r\n        poolAddress,\r\n        transactionsAndSigners,\r\n      ] = await PoolTransactions.initializeSimplePool({\r\n        connection,\r\n        programId: new PublicKey(programId),\r\n        poolName,\r\n        poolStateSpace: 1024,\r\n        poolMintDecimals: 6,\r\n        initialPoolMintSupply: new BN(\r\n          Math.round(10 ** 6 * parseFloat(initialSupply)),\r\n        ),\r\n        assetMints: assets.map((asset) => asset.mint),\r\n        initialAssetQuantities: assets.map((asset) => new BN(asset.quantity)),\r\n        creator: wallet.publicKey,\r\n        creatorAssets: assets.map((asset) => {\r\n          const found = tokenAccounts?.find((tokenAccount) =>\r\n            tokenAccount.effectiveMint.equals(asset.mint),\r\n          );\r\n          if (!found) {\r\n            throw new Error('No token account for ' + asset.mint.toBase58());\r\n          }\r\n          return found.pubkey;\r\n        }),\r\n        additionalAccounts: adminControlled\r\n          ? [\r\n              {\r\n                pubkey: new PublicKey(adminAddress),\r\n                isSigner: false,\r\n                isWritable: false,\r\n              },\r\n            ]\r\n          : [],\r\n      });\r\n      const signed = await signTransactions({\r\n        transactionsAndSigners,\r\n        wallet,\r\n        connection,\r\n      });\r\n      for (let signedTransaction of signed) {\r\n        await sendSignedTransaction({ signedTransaction, connection });\r\n      }\r\n      setNewPoolAddress(poolAddress);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      notify({\r\n        message: 'Error creating new pool',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <FloatingElement>\r\n        <Title level={4}>Create new pool</Title>\r\n        <Form layout=\"vertical\" onFinish={onSubmit}>\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Public name of the pool.\">Pool Name</Tooltip>\r\n            }\r\n            name=\"name\"\r\n          >\r\n            <Input\r\n              value={poolName}\r\n              onChange={(e) => setPoolName(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Address of the pool program.\">\r\n                Program ID{' '}\r\n                <Text type=\"secondary\">(e.g. {DEFAULT_PROGRAM_ID})</Text>\r\n              </Tooltip>\r\n            }\r\n            name=\"programId\"\r\n            initialValue={DEFAULT_PROGRAM_ID}\r\n          >\r\n            <AutoComplete\r\n              value={programId}\r\n              onChange={(value) => setProgramId(value)}\r\n              options={PROGRAM_ID_OPTIONS}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Initial number of pool tokens to mint to your account.\">\r\n                Initial Pool Token Supply\r\n              </Tooltip>\r\n            }\r\n            name=\"initialSupply\"\r\n            initialValue=\"1\"\r\n          >\r\n            <Input\r\n              value={initialSupply}\r\n              onChange={(e) => setInitialSupply(e.target.value.trim())}\r\n              type=\"number\"\r\n              min=\"0\"\r\n              step=\"any\"\r\n            />\r\n          </Form.Item>\r\n          <AddRemoveTokenButtons>\r\n            <Button\r\n              onClick={() =>\r\n                setInitialAssets((assets) => assets.concat({ valid: false }))\r\n              }\r\n            >\r\n              Add token\r\n            </Button>{' '}\r\n            <Button\r\n              onClick={() =>\r\n                setInitialAssets((assets) => assets.slice(0, assets.length - 1))\r\n              }\r\n              disabled={initialAssets.length <= 1}\r\n            >\r\n              Remove token\r\n            </Button>\r\n          </AddRemoveTokenButtons>\r\n          {initialAssets.map((asset, i) => (\r\n            <AssetInput setInitialAssets={setInitialAssets} index={i} key={i} />\r\n          ))}\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Whether the assets in the pool can be controlled by the pool admin.\">\r\n                Admin Controlled\r\n              </Tooltip>\r\n            }\r\n            name=\"adminControlled\"\r\n          >\r\n            <Switch\r\n              checked={adminControlled}\r\n              onChange={(checked) => setAdminControlled(checked)}\r\n              disabled={\r\n                programId === SIMPLE_POOL_PROGRAM_ID ||\r\n                programId === ADMIN_CONTROLLED_POOL_PROGRAM_ID\r\n              }\r\n            />\r\n          </Form.Item>\r\n          {adminControlled ? (\r\n            <Form.Item\r\n              label={\r\n                <Tooltip title=\"Address of the pool admin account.\">\r\n                  Admin Address\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <Input\r\n                value={adminAddress}\r\n                onChange={(e) => setAdminAddress(e.target.value.trim())}\r\n              />\r\n            </Form.Item>\r\n          ) : null}\r\n          <Form.Item label=\" \" colon={false}>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              disabled={!canSubmit}\r\n              loading={submitting}\r\n            >\r\n              {connected ? 'Submit' : 'Not connected to wallet'}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </FloatingElement>\r\n      {newPoolAddress ? (\r\n        <FloatingElement>\r\n          <Text>\r\n            New pool address:{' '}\r\n            <Link to={`/pools/${newPoolAddress.toBase58()}`}>\r\n              {newPoolAddress.toBase58()}\r\n            </Link>\r\n          </Text>\r\n        </FloatingElement>\r\n      ) : null}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\ntype InitialAsset = { valid: false } | ValidInitialAsset;\r\ninterface ValidInitialAsset {\r\n  valid: true;\r\n  mint: PublicKey;\r\n  quantity: number;\r\n}\r\n\r\nfunction AssetInput({ setInitialAssets, index }) {\r\n  const [mintInput, mintInfo] = useMintInput(\r\n    `mint${index}`,\r\n    <Text>Token {index + 1} Mint Address</Text>,\r\n    <>Token mint address for token {index + 1}.</>,\r\n  );\r\n  const [quantity, setQuantity] = useState('');\r\n\r\n  useEffect(() => {\r\n    let change: InitialAsset;\r\n    if (mintInfo && parseFloat(quantity) >= 0) {\r\n      let parsedQuantity = Math.round(\r\n        10 ** mintInfo.decimals * parseFloat(quantity),\r\n      );\r\n      change = {\r\n        mint: mintInfo.address,\r\n        quantity: parsedQuantity,\r\n        valid: true,\r\n      };\r\n    } else {\r\n      change = { valid: false };\r\n    }\r\n    setInitialAssets((assets: InitialAsset[]) =>\r\n      assets.map((old, i) => (i === index ? change : old)),\r\n    );\r\n  }, [setInitialAssets, index, mintInfo, quantity]);\r\n\r\n  return (\r\n    <>\r\n      {mintInput}\r\n      <Form.Item\r\n        label={\r\n          <Tooltip\r\n            title={\r\n              <>\r\n                Initial quantity of token {index + 1} to deposit into the pool.\r\n              </>\r\n            }\r\n          >\r\n            Token {index + 1} Initial Quantity\r\n          </Tooltip>\r\n        }\r\n        name={`quantity${index}`}\r\n        validateStatus={'success'}\r\n      >\r\n        <Input\r\n          value={quantity}\r\n          onChange={(e) => setQuantity(e.target.value.trim())}\r\n          type=\"number\"\r\n          min=\"0\"\r\n          step=\"any\"\r\n        />\r\n      </Form.Item>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}