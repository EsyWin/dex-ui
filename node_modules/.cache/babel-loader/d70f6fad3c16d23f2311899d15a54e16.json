{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { notify } from '../../utils/notifications';\nimport { DEFAULT_PUBLIC_KEY } from '../types';\nexport class SolflareExtensionWalletAdapter extends EventEmitter {\n  constructor() {\n    super();\n\n    this._handleConnect = (...args) => {\n      this.emit('connect', ...args);\n    };\n\n    this._handleDisconnect = (...args) => {\n      var _this$_provider, _this$_provider2;\n\n      (_this$_provider = this._provider) === null || _this$_provider === void 0 ? void 0 : _this$_provider.off('connect', this._handleConnect);\n      (_this$_provider2 = this._provider) === null || _this$_provider2 === void 0 ? void 0 : _this$_provider2.off('disconnect', this._handleDisconnect);\n      this.emit('disconnect', ...args);\n    };\n\n    this.connect = this.connect.bind(this);\n  }\n\n  get _provider() {\n    var _ref, _ref$solflare;\n\n    if ((_ref = window) === null || _ref === void 0 ? void 0 : (_ref$solflare = _ref.solflare) === null || _ref$solflare === void 0 ? void 0 : _ref$solflare.isSolflare) {\n      return window.solflare;\n    }\n\n    return undefined;\n  }\n\n  get connected() {\n    var _this$_provider3;\n\n    return ((_this$_provider3 = this._provider) === null || _this$_provider3 === void 0 ? void 0 : _this$_provider3.isConnected) || false;\n  }\n\n  get autoApprove() {\n    var _this$_provider4;\n\n    return ((_this$_provider4 = this._provider) === null || _this$_provider4 === void 0 ? void 0 : _this$_provider4.autoApprove) || false;\n  }\n\n  async signAllTransactions(transactions) {\n    if (!this._provider) {\n      return transactions;\n    }\n\n    return this._provider.signAllTransactions(transactions);\n  }\n\n  get publicKey() {\n    var _this$_provider5;\n\n    return ((_this$_provider5 = this._provider) === null || _this$_provider5 === void 0 ? void 0 : _this$_provider5.publicKey) || DEFAULT_PUBLIC_KEY;\n  }\n\n  async signTransaction(transaction) {\n    if (!this._provider) {\n      return transaction;\n    }\n\n    return this._provider.signTransaction(transaction);\n  }\n\n  async connect() {\n    var _this$_provider6, _this$_provider7, _this$_provider8;\n\n    if (!this._provider) {\n      window.open('https://solflare.com/', '_blank');\n      notify({\n        message: 'Connection Error',\n        description: 'Please install Solflare extension'\n      });\n      return;\n    }\n\n    (_this$_provider6 = this._provider) === null || _this$_provider6 === void 0 ? void 0 : _this$_provider6.on('connect', this._handleConnect);\n    (_this$_provider7 = this._provider) === null || _this$_provider7 === void 0 ? void 0 : _this$_provider7.on('disconnect', this._handleDisconnect);\n    return (_this$_provider8 = this._provider) === null || _this$_provider8 === void 0 ? void 0 : _this$_provider8.connect();\n  }\n\n  async disconnect() {\n    if (this._provider) {\n      this._provider.disconnect();\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/dev/Code/dex-ui/src/wallet-adapters/solflare-extension/index.tsx"],"names":["EventEmitter","notify","DEFAULT_PUBLIC_KEY","SolflareExtensionWalletAdapter","constructor","_handleConnect","args","emit","_handleDisconnect","_provider","off","connect","bind","window","solflare","isSolflare","undefined","connected","isConnected","autoApprove","signAllTransactions","transactions","publicKey","signTransaction","transaction","open","message","description","on","disconnect"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AAEA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,kBAAT,QAAkD,UAAlD;AAsBA,OAAO,MAAMC,8BAAN,SACGH,YADH,CAEoB;AACzBI,EAAAA,WAAW,GAAG;AACZ;;AADY,SAYNC,cAZM,GAYW,CAAC,GAAGC,IAAJ,KAAa;AACpC,WAAKC,IAAL,CAAU,SAAV,EAAqB,GAAGD,IAAxB;AACD,KAda;;AAAA,SAgBNE,iBAhBM,GAgBc,CAAC,GAAGF,IAAJ,KAAa;AAAA;;AACvC,8BAAKG,SAAL,oEAAgBC,GAAhB,CAAoB,SAApB,EAA+B,KAAKL,cAApC;AACA,+BAAKI,SAAL,sEAAgBC,GAAhB,CAAoB,YAApB,EAAkC,KAAKF,iBAAvC;AACA,WAAKD,IAAL,CAAU,YAAV,EAAwB,GAAGD,IAA3B;AACD,KApBa;;AAEZ,SAAKK,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAEoB,MAATH,SAAS,GAA0C;AAAA;;AAC7D,gBAAKI,MAAL,0DAAI,KAAiBC,QAArB,kDAAI,cAA2BC,UAA/B,EAA2C;AACzC,aAAQF,MAAD,CAAgBC,QAAvB;AACD;;AACD,WAAOE,SAAP;AACD;;AAYY,MAATC,SAAS,GAAG;AAAA;;AACd,WAAO,0BAAKR,SAAL,sEAAgBS,WAAhB,KAA+B,KAAtC;AACD;;AAEc,MAAXC,WAAW,GAAG;AAAA;;AAChB,WAAO,0BAAKV,SAAL,sEAAgBU,WAAhB,KAA+B,KAAtC;AACD;;AAEwB,QAAnBC,mBAAmB,CACvBC,YADuB,EAEC;AACxB,QAAI,CAAC,KAAKZ,SAAV,EAAqB;AACnB,aAAOY,YAAP;AACD;;AAED,WAAO,KAAKZ,SAAL,CAAeW,mBAAf,CAAmCC,YAAnC,CAAP;AACD;;AAEY,MAATC,SAAS,GAAG;AAAA;;AACd,WAAO,0BAAKb,SAAL,sEAAgBa,SAAhB,KAA6BpB,kBAApC;AACD;;AAEoB,QAAfqB,eAAe,CAACC,WAAD,EAA2B;AAC9C,QAAI,CAAC,KAAKf,SAAV,EAAqB;AACnB,aAAOe,WAAP;AACD;;AAED,WAAO,KAAKf,SAAL,CAAec,eAAf,CAA+BC,WAA/B,CAAP;AACD;;AAEY,QAAPb,OAAO,GAAG;AAAA;;AACd,QAAI,CAAC,KAAKF,SAAV,EAAqB;AACnBI,MAAAA,MAAM,CAACY,IAAP,CAAY,uBAAZ,EAAqC,QAArC;AACAxB,MAAAA,MAAM,CAAC;AACLyB,QAAAA,OAAO,EAAE,kBADJ;AAELC,QAAAA,WAAW,EAAE;AAFR,OAAD,CAAN;AAIA;AACD;;AACD,6BAAKlB,SAAL,sEAAgBmB,EAAhB,CAAmB,SAAnB,EAA8B,KAAKvB,cAAnC;AACA,6BAAKI,SAAL,sEAAgBmB,EAAhB,CAAmB,YAAnB,EAAiC,KAAKpB,iBAAtC;AACA,+BAAO,KAAKC,SAAZ,qDAAO,iBAAgBE,OAAhB,EAAP;AACD;;AAEe,QAAVkB,UAAU,GAAG;AACjB,QAAI,KAAKpB,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAeoB,UAAf;AACD;AACF;;AAvEwB","sourcesContent":["import EventEmitter from 'eventemitter3';\r\nimport { PublicKey, Transaction } from '@solana/web3.js';\r\nimport { notify } from '../../utils/notifications';\r\nimport { DEFAULT_PUBLIC_KEY, WalletAdapter } from '../types';\r\n\r\ntype SolflareExtensionEvent = 'disconnect' | 'connect';\r\ntype SolflareExtensionRequestMethod =\r\n  | 'connect'\r\n  | 'disconnect'\r\n  | 'signTransaction'\r\n  | 'signAllTransactions';\r\n\r\ninterface SolflareExtensionProvider {\r\n  publicKey?: PublicKey;\r\n  isConnected?: boolean;\r\n  autoApprove?: boolean;\r\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\r\n  signAllTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;\r\n  connect: () => Promise<void>;\r\n  disconnect: () => Promise<void>;\r\n  on: (event: SolflareExtensionEvent, handler: (args: any) => void) => void;\r\n  off: (event: SolflareExtensionEvent, handler: (args: any) => void) => void;\r\n  request: (method: SolflareExtensionRequestMethod, params: any) => Promise<any>;\r\n}\r\n\r\nexport class SolflareExtensionWalletAdapter\r\n  extends EventEmitter\r\n  implements WalletAdapter {\r\n  constructor() {\r\n    super();\r\n    this.connect = this.connect.bind(this);\r\n  }\r\n\r\n  private get _provider(): SolflareExtensionProvider | undefined {\r\n    if ((window as any)?.solflare?.isSolflare) {\r\n      return (window as any).solflare;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  private _handleConnect = (...args) => {\r\n    this.emit('connect', ...args);\r\n  }\r\n\r\n  private _handleDisconnect = (...args) => {\r\n    this._provider?.off('connect', this._handleConnect);\r\n    this._provider?.off('disconnect', this._handleDisconnect);\r\n    this.emit('disconnect', ...args);\r\n  }\r\n\r\n  get connected() {\r\n    return this._provider?.isConnected || false;\r\n  }\r\n\r\n  get autoApprove() {\r\n    return this._provider?.autoApprove || false;\r\n  }\r\n\r\n  async signAllTransactions(\r\n    transactions: Transaction[],\r\n  ): Promise<Transaction[]> {\r\n    if (!this._provider) {\r\n      return transactions;\r\n    }\r\n\r\n    return this._provider.signAllTransactions(transactions);\r\n  }\r\n\r\n  get publicKey() {\r\n    return this._provider?.publicKey || DEFAULT_PUBLIC_KEY;\r\n  }\r\n\r\n  async signTransaction(transaction: Transaction) {\r\n    if (!this._provider) {\r\n      return transaction;\r\n    }\r\n\r\n    return this._provider.signTransaction(transaction);\r\n  }\r\n\r\n  async connect() {\r\n    if (!this._provider) {\r\n      window.open('https://solflare.com/', '_blank');\r\n      notify({\r\n        message: 'Connection Error',\r\n        description: 'Please install Solflare extension',\r\n      });\r\n      return;\r\n    }\r\n    this._provider?.on('connect', this._handleConnect);\r\n    this._provider?.on('disconnect', this._handleDisconnect);\r\n    return this._provider?.connect();\r\n  }\r\n\r\n  async disconnect() {\r\n    if (this._provider) {\r\n      this._provider.disconnect();\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}