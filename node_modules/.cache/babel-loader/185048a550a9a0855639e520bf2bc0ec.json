{"ast":null,"code":"var _jsxFileName = \"/home/dev/Code/dex-ui/src/components/StandaloneBalancesDisplay.tsx\";\nimport { Button, Col, Row } from 'antd';\nimport React, { useState } from 'react';\nimport FloatingElement from './layout/FloatingElement';\nimport styled from 'styled-components';\nimport { useBalances, useMarket, useSelectedBaseCurrencyAccount, useSelectedOpenOrdersAccount, useSelectedQuoteCurrencyAccount, useTokenAccounts } from '../utils/markets';\nimport DepositDialog from './DepositDialog';\nimport { useWallet } from '../utils/wallet';\nimport { settleFunds } from '../utils/send';\nimport { useSendConnection } from '../utils/connection';\nimport { notify } from '../utils/notifications';\nimport StandaloneTokenAccountsSelect from './StandaloneTokenAccountSelect';\nconst RowBox = styled(Row)`\n  padding-bottom: 20px;\n`;\nconst ActionButton = styled(Button)`\n  color: rgba(241, 241, 242, 0.75);\n  font-size: 12px;\n  display: 'inline-block';\n  padding-right: 15px;\n  padding-left: 15px;\n  border-radius: 4px;\n  border: 1px solid rgba(241, 241, 242, 0.5);\n`;\nexport default function StandaloneBalancesDisplay() {\n  const {\n    baseCurrency,\n    quoteCurrency,\n    market\n  } = useMarket();\n  const balances = useBalances();\n  const openOrdersAccount = useSelectedOpenOrdersAccount(true);\n  const connection = useSendConnection();\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const [baseOrQuote, setBaseOrQuote] = useState('');\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\n  const [tokenAccounts] = useTokenAccounts();\n  const baseCurrencyBalances = balances && balances.find(b => b.coin === baseCurrency);\n  const quoteCurrencyBalances = balances && balances.find(b => b.coin === quoteCurrency);\n\n  async function onSettleFunds() {\n    if (!wallet) {\n      notify({\n        message: 'Wallet not connected',\n        description: 'wallet is undefined',\n        type: 'error'\n      });\n      return;\n    }\n\n    if (!market) {\n      notify({\n        message: 'Error settling funds',\n        description: 'market is undefined',\n        type: 'error'\n      });\n      return;\n    }\n\n    if (!openOrdersAccount) {\n      notify({\n        message: 'Error settling funds',\n        description: 'Open orders account is undefined',\n        type: 'error'\n      });\n      return;\n    }\n\n    if (!baseCurrencyAccount) {\n      notify({\n        message: 'Error settling funds',\n        description: 'Open orders account is undefined',\n        type: 'error'\n      });\n      return;\n    }\n\n    if (!quoteCurrencyAccount) {\n      notify({\n        message: 'Error settling funds',\n        description: 'Open orders account is undefined',\n        type: 'error'\n      });\n      return;\n    }\n\n    try {\n      await settleFunds({\n        market,\n        openOrders: openOrdersAccount,\n        connection,\n        wallet,\n        baseCurrencyAccount,\n        quoteCurrencyAccount\n      });\n    } catch (e) {\n      notify({\n        message: 'Error settling funds',\n        description: e.message,\n        type: 'error'\n      });\n    }\n  }\n\n  const formattedBalances = [[baseCurrency, baseCurrencyBalances, 'base', market === null || market === void 0 ? void 0 : market.baseMintAddress.toBase58()], [quoteCurrency, quoteCurrencyBalances, 'quote', market === null || market === void 0 ? void 0 : market.quoteMintAddress.toBase58()]];\n  return /*#__PURE__*/React.createElement(FloatingElement, {\n    style: {\n      flex: 1,\n      paddingTop: 9\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      borderBottom: '1px solid #1C274F',\n      fontSize: 14,\n      paddingBottom: 12\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, \"Wallet Balance\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingRight: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginTop: 16,\n      color: 'rgba(241, 241, 242, 0.5)',\n      fontSize: 12,\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 6,\n    style: {\n      textAlign: 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, \"Asset\"), /*#__PURE__*/React.createElement(Col, {\n    span: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, \"Wallet balance\"), /*#__PURE__*/React.createElement(Col, {\n    span: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, \"Unsettled balance\")), formattedBalances.map(([currency, balances, baseOrQuote, mint], index) => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginTop: 16,\n      fontSize: 12,\n      color: 'rgba(241, 241, 242, 1)',\n      textAlign: 'right',\n      borderBottom: '1px solid #1C274F',\n      paddingBottom: 18\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 6,\n    style: {\n      color: 'rgba(241, 241, 242, 0.5)',\n      textAlign: 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }, currency), /*#__PURE__*/React.createElement(Col, {\n    span: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, balances && balances.wallet), /*#__PURE__*/React.createElement(Col, {\n    span: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, balances && balances.unsettled), /*#__PURE__*/React.createElement(Col, {\n    span: 6,\n    style: {\n      paddingTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    span: 9,\n    style: {\n      paddingTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    span: 9,\n    style: {\n      paddingTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ActionButton, {\n    size: \"small\",\n    onClick: onSettleFunds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 19\n    }\n  }, \"Settle\"))), connected && /*#__PURE__*/React.createElement(RowBox, {\n    align: \"middle\",\n    style: {\n      paddingBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(StandaloneTokenAccountsSelect, {\n    accounts: tokenAccounts === null || tokenAccounts === void 0 ? void 0 : tokenAccounts.filter(account => account.effectiveMint.toBase58() === mint).sort((a, b) => a.pubkey.toString() === (wallet === null || wallet === void 0 ? void 0 : wallet.publicKey.toString()) ? -1 : 1),\n    mint: mint,\n    label: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 19\n    }\n  }))))), /*#__PURE__*/React.createElement(DepositDialog, {\n    baseOrQuote: baseOrQuote,\n    onClose: () => setBaseOrQuote(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/dev/Code/dex-ui/src/components/StandaloneBalancesDisplay.tsx"],"names":["Button","Col","Row","React","useState","FloatingElement","styled","useBalances","useMarket","useSelectedBaseCurrencyAccount","useSelectedOpenOrdersAccount","useSelectedQuoteCurrencyAccount","useTokenAccounts","DepositDialog","useWallet","settleFunds","useSendConnection","notify","StandaloneTokenAccountsSelect","RowBox","ActionButton","StandaloneBalancesDisplay","baseCurrency","quoteCurrency","market","balances","openOrdersAccount","connection","wallet","connected","baseOrQuote","setBaseOrQuote","baseCurrencyAccount","quoteCurrencyAccount","tokenAccounts","baseCurrencyBalances","find","b","coin","quoteCurrencyBalances","onSettleFunds","message","description","type","openOrders","e","formattedBalances","baseMintAddress","toBase58","quoteMintAddress","flex","paddingTop","width","borderBottom","fontSize","paddingBottom","paddingRight","marginTop","color","textAlign","map","currency","mint","index","unsettled","filter","account","effectiveMint","sort","a","pubkey","toString","publicKey"],"mappings":"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","sourcesContent":["import { Button, Col, Row } from 'antd';\r\nimport React, { useState } from 'react';\r\nimport FloatingElement from './layout/FloatingElement';\r\nimport styled from 'styled-components';\r\nimport {\r\n  useBalances,\r\n  useMarket,\r\n  useSelectedBaseCurrencyAccount,\r\n  useSelectedOpenOrdersAccount,\r\n  useSelectedQuoteCurrencyAccount,\r\n  useTokenAccounts,\r\n} from '../utils/markets';\r\nimport DepositDialog from './DepositDialog';\r\nimport { useWallet } from '../utils/wallet';\r\nimport { settleFunds } from '../utils/send';\r\nimport { useSendConnection } from '../utils/connection';\r\nimport { notify } from '../utils/notifications';\r\nimport { Balances } from '../utils/types';\r\nimport StandaloneTokenAccountsSelect from './StandaloneTokenAccountSelect';\r\nimport logo1 from '../assets/logo1.svg';\r\n\r\nconst RowBox = styled(Row)`\r\n  padding-bottom: 20px;\r\n`;\r\n\r\nconst ActionButton = styled(Button)`\r\n  color: rgba(241, 241, 242, 0.75);\r\n  font-size: 12px;\r\n  display: 'inline-block';\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n  border-radius: 4px;\r\n  border: 1px solid rgba(241, 241, 242, 0.5);\r\n`;\r\n\r\nexport default function StandaloneBalancesDisplay() {\r\n  const { baseCurrency, quoteCurrency, market } = useMarket();\r\n  const balances = useBalances();\r\n  const openOrdersAccount = useSelectedOpenOrdersAccount(true);\r\n  const connection = useSendConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [baseOrQuote, setBaseOrQuote] = useState('');\r\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\r\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const baseCurrencyBalances =\r\n    balances && balances.find((b) => b.coin === baseCurrency);\r\n  const quoteCurrencyBalances =\r\n    balances && balances.find((b) => b.coin === quoteCurrency);\r\n\r\n  async function onSettleFunds() {\r\n    if (!wallet) {\r\n      notify({\r\n        message: 'Wallet not connected',\r\n        description: 'wallet is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!market) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: 'market is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    if (!openOrdersAccount) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: 'Open orders account is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    if (!baseCurrencyAccount) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: 'Open orders account is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    if (!quoteCurrencyAccount) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: 'Open orders account is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await settleFunds({\r\n        market,\r\n        openOrders: openOrdersAccount,\r\n        connection,\r\n        wallet,\r\n        baseCurrencyAccount,\r\n        quoteCurrencyAccount,\r\n      });\r\n    } catch (e) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    }\r\n  }\r\n\r\n  const formattedBalances: [\r\n    string | undefined,\r\n    Balances | undefined,\r\n    string,\r\n    string | undefined,\r\n  ][] = [\r\n    [\r\n      baseCurrency,\r\n      baseCurrencyBalances,\r\n      'base',\r\n      market?.baseMintAddress.toBase58(),\r\n    ],\r\n    [\r\n      quoteCurrency,\r\n      quoteCurrencyBalances,\r\n      'quote',\r\n      market?.quoteMintAddress.toBase58(),\r\n    ],\r\n  ];\r\n  return (\r\n    <FloatingElement style={{ flex: 1, paddingTop: 9 }}>\r\n      <div\r\n        style={{\r\n          width: '100%',\r\n          borderBottom: '1px solid #1C274F',\r\n          fontSize: 14,\r\n          paddingBottom: 12,\r\n        }}\r\n      >\r\n        Wallet Balance\r\n      </div>\r\n      <div style={{ paddingRight: 10 }}>\r\n        <Row\r\n          style={{\r\n            marginTop: 16,\r\n            color: 'rgba(241, 241, 242, 0.5)',\r\n            fontSize: 12,\r\n            textAlign: 'right',\r\n          }}\r\n        >\r\n          <Col span={6} style={{ textAlign: 'left' }}>\r\n            Asset\r\n          </Col>\r\n          <Col span={9}>Wallet balance</Col>\r\n          <Col span={9}>Unsettled balance</Col>\r\n        </Row>\r\n        {formattedBalances.map(\r\n          ([currency, balances, baseOrQuote, mint], index) => (\r\n            <React.Fragment key={index}>\r\n              <Row\r\n                style={{\r\n                  marginTop: 16,\r\n                  fontSize: 12,\r\n                  color: 'rgba(241, 241, 242, 1)',\r\n                  textAlign: 'right',\r\n                  borderBottom: '1px solid #1C274F',\r\n                  paddingBottom: 18,\r\n                }}\r\n              >\r\n                <Col\r\n                  span={6}\r\n                  style={{\r\n                    color: 'rgba(241, 241, 242, 0.5)',\r\n                    textAlign: 'left',\r\n                  }}\r\n                >\r\n                  {currency}\r\n                </Col>\r\n                <Col span={9}>{balances && balances.wallet}</Col>\r\n                <Col span={9}>{balances && balances.unsettled}</Col>\r\n                <Col span={6} style={{ paddingTop: 8 }}></Col>\r\n                <Col span={9} style={{ paddingTop: 8 }}>\r\n                  {/* <ActionButton\r\n                    size=\"small\"\r\n                    onClick={() => setBaseOrQuote(baseOrQuote)}\r\n                  >\r\n                    Deposit\r\n                  </ActionButton> */}\r\n                </Col>\r\n                <Col span={9} style={{ paddingTop: 8 }}>\r\n                  <ActionButton size=\"small\" onClick={onSettleFunds}>\r\n                    Settle\r\n                  </ActionButton>\r\n                </Col>\r\n              </Row>\r\n\r\n              {connected && (\r\n                <RowBox align=\"middle\" style={{ paddingBottom: 10 }}>\r\n                  <StandaloneTokenAccountsSelect\r\n                    accounts={tokenAccounts\r\n                      ?.filter(\r\n                        (account) => account.effectiveMint.toBase58() === mint,\r\n                      )\r\n                      .sort((a, b) =>\r\n                        a.pubkey.toString() === wallet?.publicKey.toString()\r\n                          ? -1\r\n                          : 1,\r\n                      )}\r\n                    mint={mint}\r\n                    label\r\n                  />\r\n                </RowBox>\r\n              )}\r\n            </React.Fragment>\r\n          ),\r\n        )}\r\n      </div>\r\n      <DepositDialog\r\n        baseOrQuote={baseOrQuote}\r\n        onClose={() => setBaseOrQuote('')}\r\n      />\r\n    </FloatingElement>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}